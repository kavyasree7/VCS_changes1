/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b_1.TaxRate;
import com.faturacaomodelo.dbc4b_1.service.TaxRateService;


/**
 * Controller object for domain model class TaxRate.
 * @see TaxRate
 */
@RestController("dbC4B_1.TaxRateController")
@Api(value = "TaxRateController", description = "Exposes APIs to work with TaxRate resource.")
@RequestMapping("/dbC4B_1/TaxRate")
public class TaxRateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxRateController.class);

    @Autowired
	@Qualifier("dbC4B_1.TaxRateService")
	private TaxRateService taxRateService;

	@ApiOperation(value = "Creates a new TaxRate instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TaxRate createTaxRate(@RequestBody TaxRate taxRate) {
		LOGGER.debug("Create TaxRate with information: {}" , taxRate);

		taxRate = taxRateService.create(taxRate);
		LOGGER.debug("Created TaxRate with information: {}" , taxRate);

	    return taxRate;
	}


    @ApiOperation(value = "Returns the TaxRate instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxRate getTaxRate(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TaxRate with id: {}" , id);

        TaxRate foundTaxRate = taxRateService.getById(id);
        LOGGER.debug("TaxRate details with id: {}" , foundTaxRate);

        return foundTaxRate;
    }

    @ApiOperation(value = "Updates the TaxRate instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxRate editTaxRate(@PathVariable("id") Integer id, @RequestBody TaxRate taxRate) throws EntityNotFoundException {
        LOGGER.debug("Editing TaxRate with id: {}" , taxRate.getId());

        taxRate.setId(id);
        taxRate = taxRateService.update(taxRate);
        LOGGER.debug("TaxRate details with id: {}" , taxRate);

        return taxRate;
    }

    @ApiOperation(value = "Deletes the TaxRate instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTaxRate(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TaxRate with id: {}" , id);

        TaxRate deletedTaxRate = taxRateService.delete(id);

        return deletedTaxRate != null;
    }

    /**
     * @deprecated Use {@link #findTaxRates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TaxRate instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxRate> searchTaxRatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaxRates list");
        return taxRateService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxRate instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxRate> findTaxRates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxRates list");
        return taxRateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxRate instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxRate> filterTaxRates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxRates list");
        return taxRateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaxRates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taxRateService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TaxRate instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaxRates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TaxRates");
		return taxRateService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaxRateAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taxRateService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxRateService instance
	 */
	protected void setTaxRateService(TaxRateService service) {
		this.taxRateService = service;
	}

}

