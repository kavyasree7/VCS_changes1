/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b_1.DocumentMediaLibrary;
import com.faturacaomodelo.dbc4b_1.service.DocumentMediaLibraryService;


/**
 * Controller object for domain model class DocumentMediaLibrary.
 * @see DocumentMediaLibrary
 */
@RestController("dbC4B_1.DocumentMediaLibraryController")
@Api(value = "DocumentMediaLibraryController", description = "Exposes APIs to work with DocumentMediaLibrary resource.")
@RequestMapping("/dbC4B_1/DocumentMediaLibrary")
public class DocumentMediaLibraryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocumentMediaLibraryController.class);

    @Autowired
	@Qualifier("dbC4B_1.DocumentMediaLibraryService")
	private DocumentMediaLibraryService documentMediaLibraryService;

	@ApiOperation(value = "Creates a new DocumentMediaLibrary instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public DocumentMediaLibrary createDocumentMediaLibrary(@RequestBody DocumentMediaLibrary documentMediaLibrary) {
		LOGGER.debug("Create DocumentMediaLibrary with information: {}" , documentMediaLibrary);

		documentMediaLibrary = documentMediaLibraryService.create(documentMediaLibrary);
		LOGGER.debug("Created DocumentMediaLibrary with information: {}" , documentMediaLibrary);

	    return documentMediaLibrary;
	}


    @ApiOperation(value = "Returns the DocumentMediaLibrary instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DocumentMediaLibrary getDocumentMediaLibrary(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DocumentMediaLibrary with id: {}" , id);

        DocumentMediaLibrary foundDocumentMediaLibrary = documentMediaLibraryService.getById(id);
        LOGGER.debug("DocumentMediaLibrary details with id: {}" , foundDocumentMediaLibrary);

        return foundDocumentMediaLibrary;
    }

    @ApiOperation(value = "Updates the DocumentMediaLibrary instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DocumentMediaLibrary editDocumentMediaLibrary(@PathVariable("id") Integer id, @RequestBody DocumentMediaLibrary documentMediaLibrary) throws EntityNotFoundException {
        LOGGER.debug("Editing DocumentMediaLibrary with id: {}" , documentMediaLibrary.getId());

        documentMediaLibrary.setId(id);
        documentMediaLibrary = documentMediaLibraryService.update(documentMediaLibrary);
        LOGGER.debug("DocumentMediaLibrary details with id: {}" , documentMediaLibrary);

        return documentMediaLibrary;
    }

    @ApiOperation(value = "Deletes the DocumentMediaLibrary instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDocumentMediaLibrary(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DocumentMediaLibrary with id: {}" , id);

        DocumentMediaLibrary deletedDocumentMediaLibrary = documentMediaLibraryService.delete(id);

        return deletedDocumentMediaLibrary != null;
    }

    /**
     * @deprecated Use {@link #findDocumentMediaLibraries(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DocumentMediaLibrary instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentMediaLibrary> searchDocumentMediaLibrariesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DocumentMediaLibraries list");
        return documentMediaLibraryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DocumentMediaLibrary instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentMediaLibrary> findDocumentMediaLibraries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DocumentMediaLibraries list");
        return documentMediaLibraryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DocumentMediaLibrary instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentMediaLibrary> filterDocumentMediaLibraries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DocumentMediaLibraries list");
        return documentMediaLibraryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDocumentMediaLibraries(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return documentMediaLibraryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of DocumentMediaLibrary instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDocumentMediaLibraries( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DocumentMediaLibraries");
		return documentMediaLibraryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDocumentMediaLibraryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return documentMediaLibraryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DocumentMediaLibraryService instance
	 */
	protected void setDocumentMediaLibraryService(DocumentMediaLibraryService service) {
		this.documentMediaLibraryService = service;
	}

}

