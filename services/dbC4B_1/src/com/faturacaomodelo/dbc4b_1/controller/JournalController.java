/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b_1.AccountMove;
import com.faturacaomodelo.dbc4b_1.AccountMoveLine;
import com.faturacaomodelo.dbc4b_1.Journal;
import com.faturacaomodelo.dbc4b_1.service.JournalService;


/**
 * Controller object for domain model class Journal.
 * @see Journal
 */
@RestController("dbC4B_1.JournalController")
@Api(value = "JournalController", description = "Exposes APIs to work with Journal resource.")
@RequestMapping("/dbC4B_1/Journal")
public class JournalController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JournalController.class);

    @Autowired
	@Qualifier("dbC4B_1.JournalService")
	private JournalService journalService;

	@ApiOperation(value = "Creates a new Journal instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Journal createJournal(@RequestBody Journal journal) {
		LOGGER.debug("Create Journal with information: {}" , journal);

		journal = journalService.create(journal);
		LOGGER.debug("Created Journal with information: {}" , journal);

	    return journal;
	}


    @ApiOperation(value = "Returns the Journal instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Journal getJournal(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Journal with id: {}" , id);

        Journal foundJournal = journalService.getById(id);
        LOGGER.debug("Journal details with id: {}" , foundJournal);

        return foundJournal;
    }

    @ApiOperation(value = "Updates the Journal instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Journal editJournal(@PathVariable("id") Integer id, @RequestBody Journal journal) throws EntityNotFoundException {
        LOGGER.debug("Editing Journal with id: {}" , journal.getId());

        journal.setId(id);
        journal = journalService.update(journal);
        LOGGER.debug("Journal details with id: {}" , journal);

        return journal;
    }

    @ApiOperation(value = "Deletes the Journal instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteJournal(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Journal with id: {}" , id);

        Journal deletedJournal = journalService.delete(id);

        return deletedJournal != null;
    }

    /**
     * @deprecated Use {@link #findJournals(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Journal instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Journal> searchJournalsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Journals list");
        return journalService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Journal instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Journal> findJournals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Journals list");
        return journalService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Journal instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Journal> filterJournals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Journals list");
        return journalService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportJournals(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return journalService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Journal instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countJournals( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Journals");
		return journalService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getJournalAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return journalService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/accountMoves", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the accountMoves instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMove> findAssociatedAccountMoves(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated accountMoves");
        return journalService.findAssociatedAccountMoves(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/accountMoveLines", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the accountMoveLines instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMoveLine> findAssociatedAccountMoveLines(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated accountMoveLines");
        return journalService.findAssociatedAccountMoveLines(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JournalService instance
	 */
	protected void setJournalService(JournalService service) {
		this.journalService = service;
	}

}

