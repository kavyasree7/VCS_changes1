/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.PartnerPaymentMethodsRel;


/**
 * ServiceImpl object for domain model class PartnerPaymentMethodsRel.
 *
 * @see PartnerPaymentMethodsRel
 */
@Service("dbC4B_1.PartnerPaymentMethodsRelService")
public class PartnerPaymentMethodsRelServiceImpl implements PartnerPaymentMethodsRelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartnerPaymentMethodsRelServiceImpl.class);


    @Autowired
    @Qualifier("dbC4B_1.PartnerPaymentMethodsRelDao")
    private WMGenericDao<PartnerPaymentMethodsRel, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PartnerPaymentMethodsRel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public PartnerPaymentMethodsRel create(PartnerPaymentMethodsRel partnerPaymentMethodsRel) {
        LOGGER.debug("Creating a new PartnerPaymentMethodsRel with information: {}", partnerPaymentMethodsRel);
        PartnerPaymentMethodsRel partnerPaymentMethodsRelCreated = this.wmGenericDao.create(partnerPaymentMethodsRel);
        return partnerPaymentMethodsRelCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public PartnerPaymentMethodsRel getById(Integer partnerpaymentmethodsrelId) throws EntityNotFoundException {
        LOGGER.debug("Finding PartnerPaymentMethodsRel by id: {}", partnerpaymentmethodsrelId);
        PartnerPaymentMethodsRel partnerPaymentMethodsRel = this.wmGenericDao.findById(partnerpaymentmethodsrelId);
        if (partnerPaymentMethodsRel == null){
            LOGGER.debug("No PartnerPaymentMethodsRel found with id: {}", partnerpaymentmethodsrelId);
            throw new EntityNotFoundException(String.valueOf(partnerpaymentmethodsrelId));
        }
        return partnerPaymentMethodsRel;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public PartnerPaymentMethodsRel findById(Integer partnerpaymentmethodsrelId) {
        LOGGER.debug("Finding PartnerPaymentMethodsRel by id: {}", partnerpaymentmethodsrelId);
        return this.wmGenericDao.findById(partnerpaymentmethodsrelId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public PartnerPaymentMethodsRel update(PartnerPaymentMethodsRel partnerPaymentMethodsRel) throws EntityNotFoundException {
        LOGGER.debug("Updating PartnerPaymentMethodsRel with information: {}", partnerPaymentMethodsRel);
        this.wmGenericDao.update(partnerPaymentMethodsRel);

        Integer partnerpaymentmethodsrelId = partnerPaymentMethodsRel.getId();

        return this.wmGenericDao.findById(partnerpaymentmethodsrelId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public PartnerPaymentMethodsRel delete(Integer partnerpaymentmethodsrelId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PartnerPaymentMethodsRel with id: {}", partnerpaymentmethodsrelId);
        PartnerPaymentMethodsRel deleted = this.wmGenericDao.findById(partnerpaymentmethodsrelId);
        if (deleted == null) {
            LOGGER.debug("No PartnerPaymentMethodsRel found with id: {}", partnerpaymentmethodsrelId);
            throw new EntityNotFoundException(String.valueOf(partnerpaymentmethodsrelId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<PartnerPaymentMethodsRel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PartnerPaymentMethodsRels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<PartnerPaymentMethodsRel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PartnerPaymentMethodsRels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table PartnerPaymentMethodsRel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

