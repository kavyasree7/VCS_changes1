/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.Product;
import com.faturacaomodelo.dbc4b_1.ProductType;


/**
 * ServiceImpl object for domain model class ProductType.
 *
 * @see ProductType
 */
@Service("dbC4B_1.ProductTypeService")
public class ProductTypeServiceImpl implements ProductTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductTypeServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B_1.ProductService")
	private ProductService productService;

    @Autowired
    @Qualifier("dbC4B_1.ProductTypeDao")
    private WMGenericDao<ProductType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProductType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public ProductType create(ProductType productType) {
        LOGGER.debug("Creating a new ProductType with information: {}", productType);
        ProductType productTypeCreated = this.wmGenericDao.create(productType);
        if(productTypeCreated.getProducts() != null) {
            for(Product product : productTypeCreated.getProducts()) {
                product.setProductType(productTypeCreated);
                LOGGER.debug("Creating a new child Product with information: {}", product);
                productService.create(product);
            }
        }
        return productTypeCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public ProductType getById(Integer producttypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding ProductType by id: {}", producttypeId);
        ProductType productType = this.wmGenericDao.findById(producttypeId);
        if (productType == null){
            LOGGER.debug("No ProductType found with id: {}", producttypeId);
            throw new EntityNotFoundException(String.valueOf(producttypeId));
        }
        return productType;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public ProductType findById(Integer producttypeId) {
        LOGGER.debug("Finding ProductType by id: {}", producttypeId);
        return this.wmGenericDao.findById(producttypeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public ProductType update(ProductType productType) throws EntityNotFoundException {
        LOGGER.debug("Updating ProductType with information: {}", productType);
        this.wmGenericDao.update(productType);

        Integer producttypeId = productType.getId();

        return this.wmGenericDao.findById(producttypeId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public ProductType delete(Integer producttypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProductType with id: {}", producttypeId);
        ProductType deleted = this.wmGenericDao.findById(producttypeId);
        if (deleted == null) {
            LOGGER.debug("No ProductType found with id: {}", producttypeId);
            throw new EntityNotFoundException(String.valueOf(producttypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<ProductType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProductTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<ProductType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProductTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table ProductType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<Product> findAssociatedProducts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated products");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productType.id = '" + id + "'");

        return productService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductService instance
	 */
	protected void setProductService(ProductService service) {
        this.productService = service;
    }

}

