/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.BusinessPaymentMethodsRel;


/**
 * ServiceImpl object for domain model class BusinessPaymentMethodsRel.
 *
 * @see BusinessPaymentMethodsRel
 */
@Service("dbC4B_1.BusinessPaymentMethodsRelService")
public class BusinessPaymentMethodsRelServiceImpl implements BusinessPaymentMethodsRelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessPaymentMethodsRelServiceImpl.class);


    @Autowired
    @Qualifier("dbC4B_1.BusinessPaymentMethodsRelDao")
    private WMGenericDao<BusinessPaymentMethodsRel, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BusinessPaymentMethodsRel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public BusinessPaymentMethodsRel create(BusinessPaymentMethodsRel businessPaymentMethodsRel) {
        LOGGER.debug("Creating a new BusinessPaymentMethodsRel with information: {}", businessPaymentMethodsRel);
        BusinessPaymentMethodsRel businessPaymentMethodsRelCreated = this.wmGenericDao.create(businessPaymentMethodsRel);
        return businessPaymentMethodsRelCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public BusinessPaymentMethodsRel getById(Integer businesspaymentmethodsrelId) throws EntityNotFoundException {
        LOGGER.debug("Finding BusinessPaymentMethodsRel by id: {}", businesspaymentmethodsrelId);
        BusinessPaymentMethodsRel businessPaymentMethodsRel = this.wmGenericDao.findById(businesspaymentmethodsrelId);
        if (businessPaymentMethodsRel == null){
            LOGGER.debug("No BusinessPaymentMethodsRel found with id: {}", businesspaymentmethodsrelId);
            throw new EntityNotFoundException(String.valueOf(businesspaymentmethodsrelId));
        }
        return businessPaymentMethodsRel;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public BusinessPaymentMethodsRel findById(Integer businesspaymentmethodsrelId) {
        LOGGER.debug("Finding BusinessPaymentMethodsRel by id: {}", businesspaymentmethodsrelId);
        return this.wmGenericDao.findById(businesspaymentmethodsrelId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public BusinessPaymentMethodsRel update(BusinessPaymentMethodsRel businessPaymentMethodsRel) throws EntityNotFoundException {
        LOGGER.debug("Updating BusinessPaymentMethodsRel with information: {}", businessPaymentMethodsRel);
        this.wmGenericDao.update(businessPaymentMethodsRel);

        Integer businesspaymentmethodsrelId = businessPaymentMethodsRel.getId();

        return this.wmGenericDao.findById(businesspaymentmethodsrelId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public BusinessPaymentMethodsRel delete(Integer businesspaymentmethodsrelId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BusinessPaymentMethodsRel with id: {}", businesspaymentmethodsrelId);
        BusinessPaymentMethodsRel deleted = this.wmGenericDao.findById(businesspaymentmethodsrelId);
        if (deleted == null) {
            LOGGER.debug("No BusinessPaymentMethodsRel found with id: {}", businesspaymentmethodsrelId);
            throw new EntityNotFoundException(String.valueOf(businesspaymentmethodsrelId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<BusinessPaymentMethodsRel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BusinessPaymentMethodsRels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<BusinessPaymentMethodsRel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BusinessPaymentMethodsRels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table BusinessPaymentMethodsRel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

