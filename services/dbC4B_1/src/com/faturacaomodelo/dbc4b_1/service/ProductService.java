/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.DocumentMediaLibrary;
import com.faturacaomodelo.dbc4b_1.InvoiceLine;
import com.faturacaomodelo.dbc4b_1.Product;
import com.faturacaomodelo.dbc4b_1.QuotationLine;

/**
 * Service object for domain model class {@link Product}.
 */
public interface ProductService {

    /**
     * Creates a new Product. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Product if any.
     *
     * @param product Details of the Product to be created; value cannot be null.
     * @return The newly created Product.
     */
	Product create(Product product);


	/**
	 * Returns Product by given id if exists.
	 *
	 * @param productId The id of the Product to get; value cannot be null.
	 * @return Product associated with the given productId.
     * @throws EntityNotFoundException If no Product is found.
	 */
	Product getById(Integer productId) throws EntityNotFoundException;

    /**
	 * Find and return the Product by given id if exists, returns null otherwise.
	 *
	 * @param productId The id of the Product to get; value cannot be null.
	 * @return Product associated with the given productId.
	 */
	Product findById(Integer productId);


	/**
	 * Updates the details of an existing Product. It replaces all fields of the existing Product with the given product.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Product if any.
     *
	 * @param product The details of the Product to be updated; value cannot be null.
	 * @return The updated Product.
	 * @throws EntityNotFoundException if no Product is found with given input.
	 */
	Product update(Product product) throws EntityNotFoundException;

    /**
	 * Deletes an existing Product with the given id.
	 *
	 * @param productId The id of the Product to be deleted; value cannot be null.
	 * @return The deleted Product.
	 * @throws EntityNotFoundException if no Product found with the given id.
	 */
	Product delete(Integer productId) throws EntityNotFoundException;

	/**
	 * Find all Products matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Products.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Product> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Products matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Products.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Product> findAll(String query, Pageable pageable);

    /**
	 * Exports all Products matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Products in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Product.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated documentMediaLibraries for given Product id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DocumentMediaLibrary instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DocumentMediaLibrary> findAssociatedDocumentMediaLibraries(Integer id, Pageable pageable);

    /*
     * Returns the associated invoiceLines for given Product id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated InvoiceLine instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<InvoiceLine> findAssociatedInvoiceLines(Integer id, Pageable pageable);

    /*
     * Returns the associated quotationLines for given Product id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated QuotationLine instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<QuotationLine> findAssociatedQuotationLines(Integer id, Pageable pageable);

}

