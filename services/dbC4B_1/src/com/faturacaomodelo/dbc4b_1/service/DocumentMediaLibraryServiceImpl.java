/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.DocumentMediaLibrary;


/**
 * ServiceImpl object for domain model class DocumentMediaLibrary.
 *
 * @see DocumentMediaLibrary
 */
@Service("dbC4B_1.DocumentMediaLibraryService")
public class DocumentMediaLibraryServiceImpl implements DocumentMediaLibraryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocumentMediaLibraryServiceImpl.class);


    @Autowired
    @Qualifier("dbC4B_1.DocumentMediaLibraryDao")
    private WMGenericDao<DocumentMediaLibrary, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DocumentMediaLibrary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public DocumentMediaLibrary create(DocumentMediaLibrary documentMediaLibrary) {
        LOGGER.debug("Creating a new DocumentMediaLibrary with information: {}", documentMediaLibrary);
        DocumentMediaLibrary documentMediaLibraryCreated = this.wmGenericDao.create(documentMediaLibrary);
        return documentMediaLibraryCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public DocumentMediaLibrary getById(Integer documentmedialibraryId) throws EntityNotFoundException {
        LOGGER.debug("Finding DocumentMediaLibrary by id: {}", documentmedialibraryId);
        DocumentMediaLibrary documentMediaLibrary = this.wmGenericDao.findById(documentmedialibraryId);
        if (documentMediaLibrary == null){
            LOGGER.debug("No DocumentMediaLibrary found with id: {}", documentmedialibraryId);
            throw new EntityNotFoundException(String.valueOf(documentmedialibraryId));
        }
        return documentMediaLibrary;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public DocumentMediaLibrary findById(Integer documentmedialibraryId) {
        LOGGER.debug("Finding DocumentMediaLibrary by id: {}", documentmedialibraryId);
        return this.wmGenericDao.findById(documentmedialibraryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public DocumentMediaLibrary update(DocumentMediaLibrary documentMediaLibrary) throws EntityNotFoundException {
        LOGGER.debug("Updating DocumentMediaLibrary with information: {}", documentMediaLibrary);
        this.wmGenericDao.update(documentMediaLibrary);

        Integer documentmedialibraryId = documentMediaLibrary.getId();

        return this.wmGenericDao.findById(documentmedialibraryId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public DocumentMediaLibrary delete(Integer documentmedialibraryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DocumentMediaLibrary with id: {}", documentmedialibraryId);
        DocumentMediaLibrary deleted = this.wmGenericDao.findById(documentmedialibraryId);
        if (deleted == null) {
            LOGGER.debug("No DocumentMediaLibrary found with id: {}", documentmedialibraryId);
            throw new EntityNotFoundException(String.valueOf(documentmedialibraryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<DocumentMediaLibrary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DocumentMediaLibraries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<DocumentMediaLibrary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DocumentMediaLibraries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table DocumentMediaLibrary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

