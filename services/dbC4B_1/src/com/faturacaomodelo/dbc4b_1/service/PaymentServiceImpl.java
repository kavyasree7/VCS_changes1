/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.AccountMove;
import com.faturacaomodelo.dbc4b_1.Journal;
import com.faturacaomodelo.dbc4b_1.Payment;


/**
 * ServiceImpl object for domain model class Payment.
 *
 * @see Payment
 */
@Service("dbC4B_1.PaymentService")
public class PaymentServiceImpl implements PaymentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B_1.AccountMoveService")
	private AccountMoveService accountMoveService;

    @Autowired
	@Qualifier("dbC4B_1.JournalService")
	private JournalService journalService;

    @Autowired
    @Qualifier("dbC4B_1.PaymentDao")
    private WMGenericDao<Payment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Payment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public Payment create(Payment payment) {
        LOGGER.debug("Creating a new Payment with information: {}", payment);
        Payment paymentCreated = this.wmGenericDao.create(payment);
        if(paymentCreated.getAccountMoves() != null) {
            for(AccountMove accountMove : paymentCreated.getAccountMoves()) {
                accountMove.setPayment(paymentCreated);
                LOGGER.debug("Creating a new child AccountMove with information: {}", accountMove);
                accountMoveService.create(accountMove);
            }
        }

        if(paymentCreated.getJournals() != null) {
            for(Journal journal : paymentCreated.getJournals()) {
                journal.setPayment(paymentCreated);
                LOGGER.debug("Creating a new child Journal with information: {}", journal);
                journalService.create(journal);
            }
        }
        return paymentCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Payment getById(Integer paymentId) throws EntityNotFoundException {
        LOGGER.debug("Finding Payment by id: {}", paymentId);
        Payment payment = this.wmGenericDao.findById(paymentId);
        if (payment == null){
            LOGGER.debug("No Payment found with id: {}", paymentId);
            throw new EntityNotFoundException(String.valueOf(paymentId));
        }
        return payment;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Payment findById(Integer paymentId) {
        LOGGER.debug("Finding Payment by id: {}", paymentId);
        return this.wmGenericDao.findById(paymentId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public Payment update(Payment payment) throws EntityNotFoundException {
        LOGGER.debug("Updating Payment with information: {}", payment);
        this.wmGenericDao.update(payment);

        Integer paymentId = payment.getId();

        return this.wmGenericDao.findById(paymentId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public Payment delete(Integer paymentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Payment with id: {}", paymentId);
        Payment deleted = this.wmGenericDao.findById(paymentId);
        if (deleted == null) {
            LOGGER.debug("No Payment found with id: {}", paymentId);
            throw new EntityNotFoundException(String.valueOf(paymentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<Payment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Payments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<Payment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Payments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table Payment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<AccountMove> findAssociatedAccountMoves(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accountMoves");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("payment.id = '" + id + "'");

        return accountMoveService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<Journal> findAssociatedJournals(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated journals");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("payment.id = '" + id + "'");

        return journalService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveService instance
	 */
	protected void setAccountMoveService(AccountMoveService service) {
        this.accountMoveService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JournalService instance
	 */
	protected void setJournalService(JournalService service) {
        this.journalService = service;
    }

}

