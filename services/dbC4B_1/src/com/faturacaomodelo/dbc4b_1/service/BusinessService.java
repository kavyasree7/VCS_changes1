/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.AccountMove;
import com.faturacaomodelo.dbc4b_1.AccountMoveLine;
import com.faturacaomodelo.dbc4b_1.Business;
import com.faturacaomodelo.dbc4b_1.BusinessPaymentMethodsRel;
import com.faturacaomodelo.dbc4b_1.Currency;
import com.faturacaomodelo.dbc4b_1.Invoice;
import com.faturacaomodelo.dbc4b_1.Journal;
import com.faturacaomodelo.dbc4b_1.PartnerBusinessRel;
import com.faturacaomodelo.dbc4b_1.PaymentTerm;

/**
 * Service object for domain model class {@link Business}.
 */
public interface BusinessService {

    /**
     * Creates a new Business. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Business if any.
     *
     * @param business Details of the Business to be created; value cannot be null.
     * @return The newly created Business.
     */
	Business create(Business business);


	/**
	 * Returns Business by given id if exists.
	 *
	 * @param businessId The id of the Business to get; value cannot be null.
	 * @return Business associated with the given businessId.
     * @throws EntityNotFoundException If no Business is found.
	 */
	Business getById(Integer businessId) throws EntityNotFoundException;

    /**
	 * Find and return the Business by given id if exists, returns null otherwise.
	 *
	 * @param businessId The id of the Business to get; value cannot be null.
	 * @return Business associated with the given businessId.
	 */
	Business findById(Integer businessId);


	/**
	 * Updates the details of an existing Business. It replaces all fields of the existing Business with the given business.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Business if any.
     *
	 * @param business The details of the Business to be updated; value cannot be null.
	 * @return The updated Business.
	 * @throws EntityNotFoundException if no Business is found with given input.
	 */
	Business update(Business business) throws EntityNotFoundException;

    /**
	 * Deletes an existing Business with the given id.
	 *
	 * @param businessId The id of the Business to be deleted; value cannot be null.
	 * @return The deleted Business.
	 * @throws EntityNotFoundException if no Business found with the given id.
	 */
	Business delete(Integer businessId) throws EntityNotFoundException;

	/**
	 * Find all Businesses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Businesses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Business> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Businesses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Businesses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Business> findAll(String query, Pageable pageable);

    /**
	 * Exports all Businesses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Businesses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Business.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated accountMoves for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AccountMove instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AccountMove> findAssociatedAccountMoves(Integer id, Pageable pageable);

    /*
     * Returns the associated accountMoveLines for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AccountMoveLine instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AccountMoveLine> findAssociatedAccountMoveLines(Integer id, Pageable pageable);

    /*
     * Returns the associated businessPaymentMethodsRels for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated BusinessPaymentMethodsRel instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<BusinessPaymentMethodsRel> findAssociatedBusinessPaymentMethodsRels(Integer id, Pageable pageable);

    /*
     * Returns the associated currencies for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Currency instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Currency> findAssociatedCurrencies(Integer id, Pageable pageable);

    /*
     * Returns the associated invoices for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Invoice instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Invoice> findAssociatedInvoices(Integer id, Pageable pageable);

    /*
     * Returns the associated journals for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Journal instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Journal> findAssociatedJournals(Integer id, Pageable pageable);

    /*
     * Returns the associated partnerBusinessRels for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PartnerBusinessRel instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartnerBusinessRel> findAssociatedPartnerBusinessRels(Integer id, Pageable pageable);

    /*
     * Returns the associated paymentTerms for given Business id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PaymentTerm instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PaymentTerm> findAssociatedPaymentTerms(Integer id, Pageable pageable);

}

