/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.Sequence;


/**
 * ServiceImpl object for domain model class Sequence.
 *
 * @see Sequence
 */
@Service("dbC4B_1.SequenceService")
public class SequenceServiceImpl implements SequenceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SequenceServiceImpl.class);


    @Autowired
    @Qualifier("dbC4B_1.SequenceDao")
    private WMGenericDao<Sequence, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Sequence, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public Sequence create(Sequence sequence) {
        LOGGER.debug("Creating a new Sequence with information: {}", sequence);
        Sequence sequenceCreated = this.wmGenericDao.create(sequence);
        return sequenceCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Sequence getById(Integer sequenceId) throws EntityNotFoundException {
        LOGGER.debug("Finding Sequence by id: {}", sequenceId);
        Sequence sequence = this.wmGenericDao.findById(sequenceId);
        if (sequence == null){
            LOGGER.debug("No Sequence found with id: {}", sequenceId);
            throw new EntityNotFoundException(String.valueOf(sequenceId));
        }
        return sequence;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Sequence findById(Integer sequenceId) {
        LOGGER.debug("Finding Sequence by id: {}", sequenceId);
        return this.wmGenericDao.findById(sequenceId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public Sequence update(Sequence sequence) throws EntityNotFoundException {
        LOGGER.debug("Updating Sequence with information: {}", sequence);
        this.wmGenericDao.update(sequence);

        Integer sequenceId = sequence.getId();

        return this.wmGenericDao.findById(sequenceId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public Sequence delete(Integer sequenceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Sequence with id: {}", sequenceId);
        Sequence deleted = this.wmGenericDao.findById(sequenceId);
        if (deleted == null) {
            LOGGER.debug("No Sequence found with id: {}", sequenceId);
            throw new EntityNotFoundException(String.valueOf(sequenceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<Sequence> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Sequences");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<Sequence> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Sequences");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table Sequence to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

