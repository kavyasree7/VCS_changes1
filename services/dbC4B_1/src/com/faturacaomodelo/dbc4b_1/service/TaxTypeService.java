/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.Tax;
import com.faturacaomodelo.dbc4b_1.TaxType;

/**
 * Service object for domain model class {@link TaxType}.
 */
public interface TaxTypeService {

    /**
     * Creates a new TaxType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TaxType if any.
     *
     * @param taxType Details of the TaxType to be created; value cannot be null.
     * @return The newly created TaxType.
     */
	TaxType create(TaxType taxType);


	/**
	 * Returns TaxType by given id if exists.
	 *
	 * @param taxtypeId The id of the TaxType to get; value cannot be null.
	 * @return TaxType associated with the given taxtypeId.
     * @throws EntityNotFoundException If no TaxType is found.
	 */
	TaxType getById(Integer taxtypeId) throws EntityNotFoundException;

    /**
	 * Find and return the TaxType by given id if exists, returns null otherwise.
	 *
	 * @param taxtypeId The id of the TaxType to get; value cannot be null.
	 * @return TaxType associated with the given taxtypeId.
	 */
	TaxType findById(Integer taxtypeId);


	/**
	 * Updates the details of an existing TaxType. It replaces all fields of the existing TaxType with the given taxType.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TaxType if any.
     *
	 * @param taxType The details of the TaxType to be updated; value cannot be null.
	 * @return The updated TaxType.
	 * @throws EntityNotFoundException if no TaxType is found with given input.
	 */
	TaxType update(TaxType taxType) throws EntityNotFoundException;

    /**
	 * Deletes an existing TaxType with the given id.
	 *
	 * @param taxtypeId The id of the TaxType to be deleted; value cannot be null.
	 * @return The deleted TaxType.
	 * @throws EntityNotFoundException if no TaxType found with the given id.
	 */
	TaxType delete(Integer taxtypeId) throws EntityNotFoundException;

	/**
	 * Find all TaxTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TaxTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TaxType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TaxTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TaxTypes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TaxType> findAll(String query, Pageable pageable);

    /**
	 * Exports all TaxTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TaxTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TaxType.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated taxes for given TaxType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Tax instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Tax> findAssociatedTaxes(Integer id, Pageable pageable);

}

