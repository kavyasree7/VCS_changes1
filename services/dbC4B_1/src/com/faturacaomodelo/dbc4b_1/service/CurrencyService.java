/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.Contact;
import com.faturacaomodelo.dbc4b_1.Country;
import com.faturacaomodelo.dbc4b_1.Currency;
import com.faturacaomodelo.dbc4b_1.Invoice;
import com.faturacaomodelo.dbc4b_1.Journal;
import com.faturacaomodelo.dbc4b_1.Partner;
import com.faturacaomodelo.dbc4b_1.Quotation;
import com.faturacaomodelo.dbc4b_1.User;

/**
 * Service object for domain model class {@link Currency}.
 */
public interface CurrencyService {

    /**
     * Creates a new Currency. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Currency if any.
     *
     * @param currencyInstance Details of the Currency to be created; value cannot be null.
     * @return The newly created Currency.
     */
	Currency create(Currency currencyInstance);


	/**
	 * Returns Currency by given id if exists.
	 *
	 * @param currencyId The id of the Currency to get; value cannot be null.
	 * @return Currency associated with the given currencyId.
     * @throws EntityNotFoundException If no Currency is found.
	 */
	Currency getById(Integer currencyId) throws EntityNotFoundException;

    /**
	 * Find and return the Currency by given id if exists, returns null otherwise.
	 *
	 * @param currencyId The id of the Currency to get; value cannot be null.
	 * @return Currency associated with the given currencyId.
	 */
	Currency findById(Integer currencyId);


	/**
	 * Updates the details of an existing Currency. It replaces all fields of the existing Currency with the given currencyInstance.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Currency if any.
     *
	 * @param currencyInstance The details of the Currency to be updated; value cannot be null.
	 * @return The updated Currency.
	 * @throws EntityNotFoundException if no Currency is found with given input.
	 */
	Currency update(Currency currencyInstance) throws EntityNotFoundException;

    /**
	 * Deletes an existing Currency with the given id.
	 *
	 * @param currencyId The id of the Currency to be deleted; value cannot be null.
	 * @return The deleted Currency.
	 * @throws EntityNotFoundException if no Currency found with the given id.
	 */
	Currency delete(Integer currencyId) throws EntityNotFoundException;

	/**
	 * Find all Currencies matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Currencies.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Currency> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Currencies matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Currencies.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Currency> findAll(String query, Pageable pageable);

    /**
	 * Exports all Currencies matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Currencies in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Currency.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated contacts for given Currency id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Contact instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Contact> findAssociatedContacts(Integer id, Pageable pageable);

    /*
     * Returns the associated countries for given Currency id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Country instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Country> findAssociatedCountries(Integer id, Pageable pageable);

    /*
     * Returns the associated invoices for given Currency id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Invoice instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Invoice> findAssociatedInvoices(Integer id, Pageable pageable);

    /*
     * Returns the associated journals for given Currency id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Journal instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Journal> findAssociatedJournals(Integer id, Pageable pageable);

    /*
     * Returns the associated partners for given Currency id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Partner instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Partner> findAssociatedPartners(Integer id, Pageable pageable);

    /*
     * Returns the associated quotations for given Currency id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Quotation instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Quotation> findAssociatedQuotations(Integer id, Pageable pageable);

    /*
     * Returns the associated users for given Currency id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated User instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<User> findAssociatedUsers(Integer id, Pageable pageable);

}

