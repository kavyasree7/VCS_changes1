/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.InvoicePartnerRel;


/**
 * ServiceImpl object for domain model class InvoicePartnerRel.
 *
 * @see InvoicePartnerRel
 */
@Service("dbC4B_1.InvoicePartnerRelService")
public class InvoicePartnerRelServiceImpl implements InvoicePartnerRelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InvoicePartnerRelServiceImpl.class);


    @Autowired
    @Qualifier("dbC4B_1.InvoicePartnerRelDao")
    private WMGenericDao<InvoicePartnerRel, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InvoicePartnerRel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public InvoicePartnerRel create(InvoicePartnerRel invoicePartnerRel) {
        LOGGER.debug("Creating a new InvoicePartnerRel with information: {}", invoicePartnerRel);
        InvoicePartnerRel invoicePartnerRelCreated = this.wmGenericDao.create(invoicePartnerRel);
        return invoicePartnerRelCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public InvoicePartnerRel getById(Integer invoicepartnerrelId) throws EntityNotFoundException {
        LOGGER.debug("Finding InvoicePartnerRel by id: {}", invoicepartnerrelId);
        InvoicePartnerRel invoicePartnerRel = this.wmGenericDao.findById(invoicepartnerrelId);
        if (invoicePartnerRel == null){
            LOGGER.debug("No InvoicePartnerRel found with id: {}", invoicepartnerrelId);
            throw new EntityNotFoundException(String.valueOf(invoicepartnerrelId));
        }
        return invoicePartnerRel;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public InvoicePartnerRel findById(Integer invoicepartnerrelId) {
        LOGGER.debug("Finding InvoicePartnerRel by id: {}", invoicepartnerrelId);
        return this.wmGenericDao.findById(invoicepartnerrelId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public InvoicePartnerRel update(InvoicePartnerRel invoicePartnerRel) throws EntityNotFoundException {
        LOGGER.debug("Updating InvoicePartnerRel with information: {}", invoicePartnerRel);
        this.wmGenericDao.update(invoicePartnerRel);

        Integer invoicepartnerrelId = invoicePartnerRel.getId();

        return this.wmGenericDao.findById(invoicepartnerrelId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public InvoicePartnerRel delete(Integer invoicepartnerrelId) throws EntityNotFoundException {
        LOGGER.debug("Deleting InvoicePartnerRel with id: {}", invoicepartnerrelId);
        InvoicePartnerRel deleted = this.wmGenericDao.findById(invoicepartnerrelId);
        if (deleted == null) {
            LOGGER.debug("No InvoicePartnerRel found with id: {}", invoicepartnerrelId);
            throw new EntityNotFoundException(String.valueOf(invoicepartnerrelId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<InvoicePartnerRel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InvoicePartnerRels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<InvoicePartnerRel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InvoicePartnerRels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table InvoicePartnerRel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

