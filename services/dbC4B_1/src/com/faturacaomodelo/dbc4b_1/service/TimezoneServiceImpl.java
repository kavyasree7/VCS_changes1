/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.Country;
import com.faturacaomodelo.dbc4b_1.Partner;
import com.faturacaomodelo.dbc4b_1.Timezone;


/**
 * ServiceImpl object for domain model class Timezone.
 *
 * @see Timezone
 */
@Service("dbC4B_1.TimezoneService")
public class TimezoneServiceImpl implements TimezoneService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimezoneServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B_1.PartnerService")
	private PartnerService partnerService;

    @Autowired
	@Qualifier("dbC4B_1.CountryService")
	private CountryService countryService;

    @Autowired
    @Qualifier("dbC4B_1.TimezoneDao")
    private WMGenericDao<Timezone, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Timezone, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public Timezone create(Timezone timezoneInstance) {
        LOGGER.debug("Creating a new Timezone with information: {}", timezoneInstance);
        Timezone timezoneInstanceCreated = this.wmGenericDao.create(timezoneInstance);
        if(timezoneInstanceCreated.getCountries() != null) {
            for(Country countrie : timezoneInstanceCreated.getCountries()) {
                countrie.setTimezone(timezoneInstanceCreated);
                LOGGER.debug("Creating a new child Country with information: {}", countrie);
                countryService.create(countrie);
            }
        }

        if(timezoneInstanceCreated.getPartners() != null) {
            for(Partner partner : timezoneInstanceCreated.getPartners()) {
                partner.setTimezone(timezoneInstanceCreated);
                LOGGER.debug("Creating a new child Partner with information: {}", partner);
                partnerService.create(partner);
            }
        }
        return timezoneInstanceCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Timezone getById(Integer timezoneId) throws EntityNotFoundException {
        LOGGER.debug("Finding Timezone by id: {}", timezoneId);
        Timezone timezoneInstance = this.wmGenericDao.findById(timezoneId);
        if (timezoneInstance == null){
            LOGGER.debug("No Timezone found with id: {}", timezoneId);
            throw new EntityNotFoundException(String.valueOf(timezoneId));
        }
        return timezoneInstance;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Timezone findById(Integer timezoneId) {
        LOGGER.debug("Finding Timezone by id: {}", timezoneId);
        return this.wmGenericDao.findById(timezoneId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public Timezone update(Timezone timezoneInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating Timezone with information: {}", timezoneInstance);
        this.wmGenericDao.update(timezoneInstance);

        Integer timezoneId = timezoneInstance.getId();

        return this.wmGenericDao.findById(timezoneId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public Timezone delete(Integer timezoneId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Timezone with id: {}", timezoneId);
        Timezone deleted = this.wmGenericDao.findById(timezoneId);
        if (deleted == null) {
            LOGGER.debug("No Timezone found with id: {}", timezoneId);
            throw new EntityNotFoundException(String.valueOf(timezoneId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<Timezone> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Timezones");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<Timezone> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Timezones");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table Timezone to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<Country> findAssociatedCountries(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated countries");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("timezone.id = '" + id + "'");

        return countryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<Partner> findAssociatedPartners(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partners");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("timezone.id = '" + id + "'");

        return partnerService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerService instance
	 */
	protected void setPartnerService(PartnerService service) {
        this.partnerService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CountryService instance
	 */
	protected void setCountryService(CountryService service) {
        this.countryService = service;
    }

}

