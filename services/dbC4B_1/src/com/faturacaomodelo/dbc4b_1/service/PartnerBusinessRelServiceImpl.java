/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.PartnerBusinessRel;


/**
 * ServiceImpl object for domain model class PartnerBusinessRel.
 *
 * @see PartnerBusinessRel
 */
@Service("dbC4B_1.PartnerBusinessRelService")
public class PartnerBusinessRelServiceImpl implements PartnerBusinessRelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartnerBusinessRelServiceImpl.class);


    @Autowired
    @Qualifier("dbC4B_1.PartnerBusinessRelDao")
    private WMGenericDao<PartnerBusinessRel, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PartnerBusinessRel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4B_1TransactionManager")
    @Override
	public PartnerBusinessRel create(PartnerBusinessRel partnerBusinessRel) {
        LOGGER.debug("Creating a new PartnerBusinessRel with information: {}", partnerBusinessRel);
        PartnerBusinessRel partnerBusinessRelCreated = this.wmGenericDao.create(partnerBusinessRel);
        return partnerBusinessRelCreated;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public PartnerBusinessRel getById(Integer partnerbusinessrelId) throws EntityNotFoundException {
        LOGGER.debug("Finding PartnerBusinessRel by id: {}", partnerbusinessrelId);
        PartnerBusinessRel partnerBusinessRel = this.wmGenericDao.findById(partnerbusinessrelId);
        if (partnerBusinessRel == null){
            LOGGER.debug("No PartnerBusinessRel found with id: {}", partnerbusinessrelId);
            throw new EntityNotFoundException(String.valueOf(partnerbusinessrelId));
        }
        return partnerBusinessRel;
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public PartnerBusinessRel findById(Integer partnerbusinessrelId) {
        LOGGER.debug("Finding PartnerBusinessRel by id: {}", partnerbusinessrelId);
        return this.wmGenericDao.findById(partnerbusinessrelId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4B_1TransactionManager")
	@Override
	public PartnerBusinessRel update(PartnerBusinessRel partnerBusinessRel) throws EntityNotFoundException {
        LOGGER.debug("Updating PartnerBusinessRel with information: {}", partnerBusinessRel);
        this.wmGenericDao.update(partnerBusinessRel);

        Integer partnerbusinessrelId = partnerBusinessRel.getId();

        return this.wmGenericDao.findById(partnerbusinessrelId);
    }

    @Transactional(value = "dbC4B_1TransactionManager")
	@Override
	public PartnerBusinessRel delete(Integer partnerbusinessrelId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PartnerBusinessRel with id: {}", partnerbusinessrelId);
        PartnerBusinessRel deleted = this.wmGenericDao.findById(partnerbusinessrelId);
        if (deleted == null) {
            LOGGER.debug("No PartnerBusinessRel found with id: {}", partnerbusinessrelId);
            throw new EntityNotFoundException(String.valueOf(partnerbusinessrelId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public Page<PartnerBusinessRel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PartnerBusinessRels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Page<PartnerBusinessRel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PartnerBusinessRels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B_1 for table PartnerBusinessRel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4B_1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

