/*Copyright (c) 2017-2018 multibase.pt All Rights Reserved.
 This software is the confidential and proprietary information of multibase.pt You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with multibase.pt*/
package com.faturacaomodelo.dbc4b_1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b_1.FiscalPosition;
import com.faturacaomodelo.dbc4b_1.Partner;

/**
 * Service object for domain model class {@link FiscalPosition}.
 */
public interface FiscalPositionService {

    /**
     * Creates a new FiscalPosition. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FiscalPosition if any.
     *
     * @param fiscalPosition Details of the FiscalPosition to be created; value cannot be null.
     * @return The newly created FiscalPosition.
     */
	FiscalPosition create(FiscalPosition fiscalPosition);


	/**
	 * Returns FiscalPosition by given id if exists.
	 *
	 * @param fiscalpositionId The id of the FiscalPosition to get; value cannot be null.
	 * @return FiscalPosition associated with the given fiscalpositionId.
     * @throws EntityNotFoundException If no FiscalPosition is found.
	 */
	FiscalPosition getById(Integer fiscalpositionId) throws EntityNotFoundException;

    /**
	 * Find and return the FiscalPosition by given id if exists, returns null otherwise.
	 *
	 * @param fiscalpositionId The id of the FiscalPosition to get; value cannot be null.
	 * @return FiscalPosition associated with the given fiscalpositionId.
	 */
	FiscalPosition findById(Integer fiscalpositionId);


	/**
	 * Updates the details of an existing FiscalPosition. It replaces all fields of the existing FiscalPosition with the given fiscalPosition.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on FiscalPosition if any.
     *
	 * @param fiscalPosition The details of the FiscalPosition to be updated; value cannot be null.
	 * @return The updated FiscalPosition.
	 * @throws EntityNotFoundException if no FiscalPosition is found with given input.
	 */
	FiscalPosition update(FiscalPosition fiscalPosition) throws EntityNotFoundException;

    /**
	 * Deletes an existing FiscalPosition with the given id.
	 *
	 * @param fiscalpositionId The id of the FiscalPosition to be deleted; value cannot be null.
	 * @return The deleted FiscalPosition.
	 * @throws EntityNotFoundException if no FiscalPosition found with the given id.
	 */
	FiscalPosition delete(Integer fiscalpositionId) throws EntityNotFoundException;

	/**
	 * Find all FiscalPositions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FiscalPositions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<FiscalPosition> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all FiscalPositions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FiscalPositions.
     *
     * @see Pageable
     * @see Page
	 */
    Page<FiscalPosition> findAll(String query, Pageable pageable);

    /**
	 * Exports all FiscalPositions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the FiscalPositions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the FiscalPosition.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated partners for given FiscalPosition id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Partner instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Partner> findAssociatedPartners(Integer id, Pageable pageable);

}

