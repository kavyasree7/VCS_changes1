/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.AccountMove;
import com.faturacaomodelo.dbinvoice.AccountMoveLine;
import com.faturacaomodelo.dbinvoice.Business;
import com.faturacaomodelo.dbinvoice.BusinessPaymentMethodsRel;
import com.faturacaomodelo.dbinvoice.Invoice;
import com.faturacaomodelo.dbinvoice.Journal;
import com.faturacaomodelo.dbinvoice.PartnerBusinessRel;
import com.faturacaomodelo.dbinvoice.PaymentTerm;


/**
 * ServiceImpl object for domain model class Business.
 *
 * @see Business
 */
@Service("dbinvoice.BusinessService")
public class BusinessServiceImpl implements BusinessService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.InvoiceService")
	private InvoiceService invoiceService;

    @Autowired
	@Qualifier("dbinvoice.BusinessPaymentMethodsRelService")
	private BusinessPaymentMethodsRelService businessPaymentMethodsRelService;

    @Autowired
	@Qualifier("dbinvoice.AccountMoveService")
	private AccountMoveService accountMoveService;

    @Autowired
	@Qualifier("dbinvoice.JournalService")
	private JournalService journalService;

    @Autowired
	@Qualifier("dbinvoice.PartnerBusinessRelService")
	private PartnerBusinessRelService partnerBusinessRelService;

    @Autowired
	@Qualifier("dbinvoice.PaymentTermService")
	private PaymentTermService paymentTermService;

    @Autowired
	@Qualifier("dbinvoice.AccountMoveLineService")
	private AccountMoveLineService accountMoveLineService;

    @Autowired
    @Qualifier("dbinvoice.BusinessDao")
    private WMGenericDao<Business, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Business, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public Business create(Business business) {
        LOGGER.debug("Creating a new Business with information: {}", business);
        Business businessCreated = this.wmGenericDao.create(business);
        if(businessCreated.getAccountMoves() != null) {
            for(AccountMove accountMove : businessCreated.getAccountMoves()) {
                accountMove.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child AccountMove with information: {}", accountMove);
                accountMoveService.create(accountMove);
            }
        }

        if(businessCreated.getAccountMoveLines() != null) {
            for(AccountMoveLine accountMoveLine : businessCreated.getAccountMoveLines()) {
                accountMoveLine.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child AccountMoveLine with information: {}", accountMoveLine);
                accountMoveLineService.create(accountMoveLine);
            }
        }

        if(businessCreated.getBusinessPaymentMethodsRels() != null) {
            for(BusinessPaymentMethodsRel businessPaymentMethodsRel : businessCreated.getBusinessPaymentMethodsRels()) {
                businessPaymentMethodsRel.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child BusinessPaymentMethodsRel with information: {}", businessPaymentMethodsRel);
                businessPaymentMethodsRelService.create(businessPaymentMethodsRel);
            }
        }

        if(businessCreated.getInvoices() != null) {
            for(Invoice invoice : businessCreated.getInvoices()) {
                invoice.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Invoice with information: {}", invoice);
                invoiceService.create(invoice);
            }
        }

        if(businessCreated.getJournals() != null) {
            for(Journal journal : businessCreated.getJournals()) {
                journal.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child Journal with information: {}", journal);
                journalService.create(journal);
            }
        }

        if(businessCreated.getPartnerBusinessRels() != null) {
            for(PartnerBusinessRel partnerBusinessRel : businessCreated.getPartnerBusinessRels()) {
                partnerBusinessRel.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child PartnerBusinessRel with information: {}", partnerBusinessRel);
                partnerBusinessRelService.create(partnerBusinessRel);
            }
        }

        if(businessCreated.getPaymentTerms() != null) {
            for(PaymentTerm paymentTerm : businessCreated.getPaymentTerms()) {
                paymentTerm.setBusiness(businessCreated);
                LOGGER.debug("Creating a new child PaymentTerm with information: {}", paymentTerm);
                paymentTermService.create(paymentTerm);
            }
        }
        return businessCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Business getById(Integer businessId) throws EntityNotFoundException {
        LOGGER.debug("Finding Business by id: {}", businessId);
        Business business = this.wmGenericDao.findById(businessId);
        if (business == null){
            LOGGER.debug("No Business found with id: {}", businessId);
            throw new EntityNotFoundException(String.valueOf(businessId));
        }
        return business;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Business findById(Integer businessId) {
        LOGGER.debug("Finding Business by id: {}", businessId);
        return this.wmGenericDao.findById(businessId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public Business update(Business business) throws EntityNotFoundException {
        LOGGER.debug("Updating Business with information: {}", business);
        this.wmGenericDao.update(business);

        Integer businessId = business.getId();

        return this.wmGenericDao.findById(businessId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public Business delete(Integer businessId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Business with id: {}", businessId);
        Business deleted = this.wmGenericDao.findById(businessId);
        if (deleted == null) {
            LOGGER.debug("No Business found with id: {}", businessId);
            throw new EntityNotFoundException(String.valueOf(businessId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<Business> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Businesses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Business> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Businesses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table Business to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<AccountMove> findAssociatedAccountMoves(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accountMoves");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.id = '" + id + "'");

        return accountMoveService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<AccountMoveLine> findAssociatedAccountMoveLines(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accountMoveLines");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.id = '" + id + "'");

        return accountMoveLineService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<BusinessPaymentMethodsRel> findAssociatedBusinessPaymentMethodsRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated businessPaymentMethodsRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.id = '" + id + "'");

        return businessPaymentMethodsRelService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Invoice> findAssociatedInvoices(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated invoices");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.id = '" + id + "'");

        return invoiceService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Journal> findAssociatedJournals(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated journals");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.id = '" + id + "'");

        return journalService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<PartnerBusinessRel> findAssociatedPartnerBusinessRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partnerBusinessRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.id = '" + id + "'");

        return partnerBusinessRelService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<PaymentTerm> findAssociatedPaymentTerms(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated paymentTerms");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("business.id = '" + id + "'");

        return paymentTermService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoiceService instance
	 */
	protected void setInvoiceService(InvoiceService service) {
        this.invoiceService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessPaymentMethodsRelService instance
	 */
	protected void setBusinessPaymentMethodsRelService(BusinessPaymentMethodsRelService service) {
        this.businessPaymentMethodsRelService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveService instance
	 */
	protected void setAccountMoveService(AccountMoveService service) {
        this.accountMoveService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JournalService instance
	 */
	protected void setJournalService(JournalService service) {
        this.journalService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerBusinessRelService instance
	 */
	protected void setPartnerBusinessRelService(PartnerBusinessRelService service) {
        this.partnerBusinessRelService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentTermService instance
	 */
	protected void setPaymentTermService(PaymentTermService service) {
        this.paymentTermService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveLineService instance
	 */
	protected void setAccountMoveLineService(AccountMoveLineService service) {
        this.accountMoveLineService = service;
    }

}

