/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.PartnerCode;


/**
 * ServiceImpl object for domain model class PartnerCode.
 *
 * @see PartnerCode
 */
@Service("dbinvoice.PartnerCodeService")
public class PartnerCodeServiceImpl implements PartnerCodeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartnerCodeServiceImpl.class);


    @Autowired
    @Qualifier("dbinvoice.PartnerCodeDao")
    private WMGenericDao<PartnerCode, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PartnerCode, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public PartnerCode create(PartnerCode partnerCode) {
        LOGGER.debug("Creating a new PartnerCode with information: {}", partnerCode);
        PartnerCode partnerCodeCreated = this.wmGenericDao.create(partnerCode);
        return partnerCodeCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public PartnerCode getById(Integer partnercodeId) throws EntityNotFoundException {
        LOGGER.debug("Finding PartnerCode by id: {}", partnercodeId);
        PartnerCode partnerCode = this.wmGenericDao.findById(partnercodeId);
        if (partnerCode == null){
            LOGGER.debug("No PartnerCode found with id: {}", partnercodeId);
            throw new EntityNotFoundException(String.valueOf(partnercodeId));
        }
        return partnerCode;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public PartnerCode findById(Integer partnercodeId) {
        LOGGER.debug("Finding PartnerCode by id: {}", partnercodeId);
        return this.wmGenericDao.findById(partnercodeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public PartnerCode update(PartnerCode partnerCode) throws EntityNotFoundException {
        LOGGER.debug("Updating PartnerCode with information: {}", partnerCode);
        this.wmGenericDao.update(partnerCode);

        Integer partnercodeId = partnerCode.getId();

        return this.wmGenericDao.findById(partnercodeId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public PartnerCode delete(Integer partnercodeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PartnerCode with id: {}", partnercodeId);
        PartnerCode deleted = this.wmGenericDao.findById(partnercodeId);
        if (deleted == null) {
            LOGGER.debug("No PartnerCode found with id: {}", partnercodeId);
            throw new EntityNotFoundException(String.valueOf(partnercodeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<PartnerCode> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PartnerCodes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<PartnerCode> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PartnerCodes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table PartnerCode to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

