/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.CodeType;
import com.faturacaomodelo.dbinvoice.PartnerCode;


/**
 * ServiceImpl object for domain model class CodeType.
 *
 * @see CodeType
 */
@Service("dbinvoice.CodeTypeService")
public class CodeTypeServiceImpl implements CodeTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CodeTypeServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.PartnerCodeService")
	private PartnerCodeService partnerCodeService;

    @Autowired
    @Qualifier("dbinvoice.CodeTypeDao")
    private WMGenericDao<CodeType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CodeType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public CodeType create(CodeType codeType) {
        LOGGER.debug("Creating a new CodeType with information: {}", codeType);
        CodeType codeTypeCreated = this.wmGenericDao.create(codeType);
        if(codeTypeCreated.getPartnerCodes() != null) {
            for(PartnerCode partnerCode : codeTypeCreated.getPartnerCodes()) {
                partnerCode.setCodeType(codeTypeCreated);
                LOGGER.debug("Creating a new child PartnerCode with information: {}", partnerCode);
                partnerCodeService.create(partnerCode);
            }
        }
        return codeTypeCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public CodeType getById(Integer codetypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding CodeType by id: {}", codetypeId);
        CodeType codeType = this.wmGenericDao.findById(codetypeId);
        if (codeType == null){
            LOGGER.debug("No CodeType found with id: {}", codetypeId);
            throw new EntityNotFoundException(String.valueOf(codetypeId));
        }
        return codeType;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public CodeType findById(Integer codetypeId) {
        LOGGER.debug("Finding CodeType by id: {}", codetypeId);
        return this.wmGenericDao.findById(codetypeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public CodeType update(CodeType codeType) throws EntityNotFoundException {
        LOGGER.debug("Updating CodeType with information: {}", codeType);
        this.wmGenericDao.update(codeType);

        Integer codetypeId = codeType.getId();

        return this.wmGenericDao.findById(codetypeId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public CodeType delete(Integer codetypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CodeType with id: {}", codetypeId);
        CodeType deleted = this.wmGenericDao.findById(codetypeId);
        if (deleted == null) {
            LOGGER.debug("No CodeType found with id: {}", codetypeId);
            throw new EntityNotFoundException(String.valueOf(codetypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<CodeType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CodeTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<CodeType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CodeTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table CodeType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<PartnerCode> findAssociatedPartnerCodes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partnerCodes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("codeType.id = '" + id + "'");

        return partnerCodeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerCodeService instance
	 */
	protected void setPartnerCodeService(PartnerCodeService service) {
        this.partnerCodeService = service;
    }

}

