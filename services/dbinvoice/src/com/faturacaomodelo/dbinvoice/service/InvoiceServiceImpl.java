/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.Invoice;
import com.faturacaomodelo.dbinvoice.InvoiceLine;
import com.faturacaomodelo.dbinvoice.InvoicePartnerRel;
import com.faturacaomodelo.dbinvoice.Quotation;


/**
 * ServiceImpl object for domain model class Invoice.
 *
 * @see Invoice
 */
@Service("dbinvoice.InvoiceService")
public class InvoiceServiceImpl implements InvoiceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InvoiceServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.QuotationService")
	private QuotationService quotationService;

    @Autowired
	@Qualifier("dbinvoice.InvoiceLineService")
	private InvoiceLineService invoiceLineService;

    @Autowired
	@Qualifier("dbinvoice.InvoicePartnerRelService")
	private InvoicePartnerRelService invoicePartnerRelService;

    @Autowired
    @Qualifier("dbinvoice.InvoiceDao")
    private WMGenericDao<Invoice, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Invoice, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public Invoice create(Invoice invoice) {
        LOGGER.debug("Creating a new Invoice with information: {}", invoice);
        Invoice invoiceCreated = this.wmGenericDao.create(invoice);
        if(invoiceCreated.getInvoiceLines() != null) {
            for(InvoiceLine invoiceLine : invoiceCreated.getInvoiceLines()) {
                invoiceLine.setInvoice(invoiceCreated);
                LOGGER.debug("Creating a new child InvoiceLine with information: {}", invoiceLine);
                invoiceLineService.create(invoiceLine);
            }
        }

        if(invoiceCreated.getInvoicePartnerRels() != null) {
            for(InvoicePartnerRel invoicePartnerRel : invoiceCreated.getInvoicePartnerRels()) {
                invoicePartnerRel.setInvoice(invoiceCreated);
                LOGGER.debug("Creating a new child InvoicePartnerRel with information: {}", invoicePartnerRel);
                invoicePartnerRelService.create(invoicePartnerRel);
            }
        }

        if(invoiceCreated.getQuotations() != null) {
            for(Quotation quotation : invoiceCreated.getQuotations()) {
                quotation.setInvoice(invoiceCreated);
                LOGGER.debug("Creating a new child Quotation with information: {}", quotation);
                quotationService.create(quotation);
            }
        }
        return invoiceCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Invoice getById(Integer invoiceId) throws EntityNotFoundException {
        LOGGER.debug("Finding Invoice by id: {}", invoiceId);
        Invoice invoice = this.wmGenericDao.findById(invoiceId);
        if (invoice == null){
            LOGGER.debug("No Invoice found with id: {}", invoiceId);
            throw new EntityNotFoundException(String.valueOf(invoiceId));
        }
        return invoice;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Invoice findById(Integer invoiceId) {
        LOGGER.debug("Finding Invoice by id: {}", invoiceId);
        return this.wmGenericDao.findById(invoiceId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public Invoice update(Invoice invoice) throws EntityNotFoundException {
        LOGGER.debug("Updating Invoice with information: {}", invoice);
        this.wmGenericDao.update(invoice);

        Integer invoiceId = invoice.getId();

        return this.wmGenericDao.findById(invoiceId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public Invoice delete(Integer invoiceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Invoice with id: {}", invoiceId);
        Invoice deleted = this.wmGenericDao.findById(invoiceId);
        if (deleted == null) {
            LOGGER.debug("No Invoice found with id: {}", invoiceId);
            throw new EntityNotFoundException(String.valueOf(invoiceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<Invoice> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Invoices");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Invoice> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Invoices");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table Invoice to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<InvoiceLine> findAssociatedInvoiceLines(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated invoiceLines");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("invoice.id = '" + id + "'");

        return invoiceLineService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<InvoicePartnerRel> findAssociatedInvoicePartnerRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated invoicePartnerRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("invoice.id = '" + id + "'");

        return invoicePartnerRelService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Quotation> findAssociatedQuotations(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated quotations");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("invoice.id = '" + id + "'");

        return quotationService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QuotationService instance
	 */
	protected void setQuotationService(QuotationService service) {
        this.quotationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoiceLineService instance
	 */
	protected void setInvoiceLineService(InvoiceLineService service) {
        this.invoiceLineService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoicePartnerRelService instance
	 */
	protected void setInvoicePartnerRelService(InvoicePartnerRelService service) {
        this.invoicePartnerRelService = service;
    }

}

