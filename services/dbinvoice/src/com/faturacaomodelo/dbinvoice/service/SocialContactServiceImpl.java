/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.SocialContact;


/**
 * ServiceImpl object for domain model class SocialContact.
 *
 * @see SocialContact
 */
@Service("dbinvoice.SocialContactService")
public class SocialContactServiceImpl implements SocialContactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SocialContactServiceImpl.class);


    @Autowired
    @Qualifier("dbinvoice.SocialContactDao")
    private WMGenericDao<SocialContact, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SocialContact, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public SocialContact create(SocialContact socialContact) {
        LOGGER.debug("Creating a new SocialContact with information: {}", socialContact);
        SocialContact socialContactCreated = this.wmGenericDao.create(socialContact);
        return socialContactCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public SocialContact getById(Integer socialcontactId) throws EntityNotFoundException {
        LOGGER.debug("Finding SocialContact by id: {}", socialcontactId);
        SocialContact socialContact = this.wmGenericDao.findById(socialcontactId);
        if (socialContact == null){
            LOGGER.debug("No SocialContact found with id: {}", socialcontactId);
            throw new EntityNotFoundException(String.valueOf(socialcontactId));
        }
        return socialContact;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public SocialContact findById(Integer socialcontactId) {
        LOGGER.debug("Finding SocialContact by id: {}", socialcontactId);
        return this.wmGenericDao.findById(socialcontactId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public SocialContact update(SocialContact socialContact) throws EntityNotFoundException {
        LOGGER.debug("Updating SocialContact with information: {}", socialContact);
        this.wmGenericDao.update(socialContact);

        Integer socialcontactId = socialContact.getId();

        return this.wmGenericDao.findById(socialcontactId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public SocialContact delete(Integer socialcontactId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SocialContact with id: {}", socialcontactId);
        SocialContact deleted = this.wmGenericDao.findById(socialcontactId);
        if (deleted == null) {
            LOGGER.debug("No SocialContact found with id: {}", socialcontactId);
            throw new EntityNotFoundException(String.valueOf(socialcontactId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<SocialContact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SocialContacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<SocialContact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SocialContacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table SocialContact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

