/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.AccountMove;
import com.faturacaomodelo.dbinvoice.AccountMoveLine;


/**
 * ServiceImpl object for domain model class AccountMove.
 *
 * @see AccountMove
 */
@Service("dbinvoice.AccountMoveService")
public class AccountMoveServiceImpl implements AccountMoveService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountMoveServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.AccountMoveLineService")
	private AccountMoveLineService accountMoveLineService;

    @Autowired
    @Qualifier("dbinvoice.AccountMoveDao")
    private WMGenericDao<AccountMove, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AccountMove, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public AccountMove create(AccountMove accountMove) {
        LOGGER.debug("Creating a new AccountMove with information: {}", accountMove);
        AccountMove accountMoveCreated = this.wmGenericDao.create(accountMove);
        if(accountMoveCreated.getAccountMoveLines() != null) {
            for(AccountMoveLine accountMoveLine : accountMoveCreated.getAccountMoveLines()) {
                accountMoveLine.setAccountMove(accountMoveCreated);
                LOGGER.debug("Creating a new child AccountMoveLine with information: {}", accountMoveLine);
                accountMoveLineService.create(accountMoveLine);
            }
        }
        return accountMoveCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public AccountMove getById(Integer accountmoveId) throws EntityNotFoundException {
        LOGGER.debug("Finding AccountMove by id: {}", accountmoveId);
        AccountMove accountMove = this.wmGenericDao.findById(accountmoveId);
        if (accountMove == null){
            LOGGER.debug("No AccountMove found with id: {}", accountmoveId);
            throw new EntityNotFoundException(String.valueOf(accountmoveId));
        }
        return accountMove;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public AccountMove findById(Integer accountmoveId) {
        LOGGER.debug("Finding AccountMove by id: {}", accountmoveId);
        return this.wmGenericDao.findById(accountmoveId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public AccountMove update(AccountMove accountMove) throws EntityNotFoundException {
        LOGGER.debug("Updating AccountMove with information: {}", accountMove);
        this.wmGenericDao.update(accountMove);

        Integer accountmoveId = accountMove.getId();

        return this.wmGenericDao.findById(accountmoveId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public AccountMove delete(Integer accountmoveId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccountMove with id: {}", accountmoveId);
        AccountMove deleted = this.wmGenericDao.findById(accountmoveId);
        if (deleted == null) {
            LOGGER.debug("No AccountMove found with id: {}", accountmoveId);
            throw new EntityNotFoundException(String.valueOf(accountmoveId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<AccountMove> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AccountMoves");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<AccountMove> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AccountMoves");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table AccountMove to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<AccountMoveLine> findAssociatedAccountMoveLines(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accountMoveLines");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("accountMove.id = '" + id + "'");

        return accountMoveLineService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveLineService instance
	 */
	protected void setAccountMoveLineService(AccountMoveLineService service) {
        this.accountMoveLineService = service;
    }

}

