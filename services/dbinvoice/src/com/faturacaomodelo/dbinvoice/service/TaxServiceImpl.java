/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.Product;
import com.faturacaomodelo.dbinvoice.Tax;
import com.faturacaomodelo.dbinvoice.TaxInvoiceLineRel;
import com.faturacaomodelo.dbinvoice.TaxRate;


/**
 * ServiceImpl object for domain model class Tax.
 *
 * @see Tax
 */
@Service("dbinvoice.TaxService")
public class TaxServiceImpl implements TaxService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.TaxRateService")
	private TaxRateService taxRateService;

    @Autowired
	@Qualifier("dbinvoice.TaxInvoiceLineRelService")
	private TaxInvoiceLineRelService taxInvoiceLineRelService;

    @Autowired
	@Qualifier("dbinvoice.ProductService")
	private ProductService productService;

    @Autowired
    @Qualifier("dbinvoice.TaxDao")
    private WMGenericDao<Tax, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Tax, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public Tax create(Tax tax) {
        LOGGER.debug("Creating a new Tax with information: {}", tax);
        Tax taxCreated = this.wmGenericDao.create(tax);
        if(taxCreated.getProducts() != null) {
            for(Product product : taxCreated.getProducts()) {
                product.setTax(taxCreated);
                LOGGER.debug("Creating a new child Product with information: {}", product);
                productService.create(product);
            }
        }

        if(taxCreated.getTaxRates() != null) {
            for(TaxRate taxRate : taxCreated.getTaxRates()) {
                taxRate.setTax(taxCreated);
                LOGGER.debug("Creating a new child TaxRate with information: {}", taxRate);
                taxRateService.create(taxRate);
            }
        }

        if(taxCreated.getTaxInvoiceLineRels() != null) {
            for(TaxInvoiceLineRel taxInvoiceLineRel : taxCreated.getTaxInvoiceLineRels()) {
                taxInvoiceLineRel.setTax(taxCreated);
                LOGGER.debug("Creating a new child TaxInvoiceLineRel with information: {}", taxInvoiceLineRel);
                taxInvoiceLineRelService.create(taxInvoiceLineRel);
            }
        }
        return taxCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Tax getById(Integer taxId) throws EntityNotFoundException {
        LOGGER.debug("Finding Tax by id: {}", taxId);
        Tax tax = this.wmGenericDao.findById(taxId);
        if (tax == null){
            LOGGER.debug("No Tax found with id: {}", taxId);
            throw new EntityNotFoundException(String.valueOf(taxId));
        }
        return tax;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Tax findById(Integer taxId) {
        LOGGER.debug("Finding Tax by id: {}", taxId);
        return this.wmGenericDao.findById(taxId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public Tax update(Tax tax) throws EntityNotFoundException {
        LOGGER.debug("Updating Tax with information: {}", tax);
        this.wmGenericDao.update(tax);

        Integer taxId = tax.getId();

        return this.wmGenericDao.findById(taxId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public Tax delete(Integer taxId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Tax with id: {}", taxId);
        Tax deleted = this.wmGenericDao.findById(taxId);
        if (deleted == null) {
            LOGGER.debug("No Tax found with id: {}", taxId);
            throw new EntityNotFoundException(String.valueOf(taxId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<Tax> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Taxes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Tax> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Taxes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table Tax to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Product> findAssociatedProducts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated products");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tax.id = '" + id + "'");

        return productService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<TaxRate> findAssociatedTaxRates(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taxRates");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tax.id = '" + id + "'");

        return taxRateService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<TaxInvoiceLineRel> findAssociatedTaxInvoiceLineRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taxInvoiceLineRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tax.id = '" + id + "'");

        return taxInvoiceLineRelService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxRateService instance
	 */
	protected void setTaxRateService(TaxRateService service) {
        this.taxRateService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxInvoiceLineRelService instance
	 */
	protected void setTaxInvoiceLineRelService(TaxInvoiceLineRelService service) {
        this.taxInvoiceLineRelService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductService instance
	 */
	protected void setProductService(ProductService service) {
        this.productService = service;
    }

}

