/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.Role;
import com.faturacaomodelo.dbinvoice.User;


/**
 * ServiceImpl object for domain model class Role.
 *
 * @see Role
 */
@Service("dbinvoice.RoleService")
public class RoleServiceImpl implements RoleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RoleServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.UserService")
	private UserService userService;

    @Autowired
    @Qualifier("dbinvoice.RoleDao")
    private WMGenericDao<Role, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Role, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public Role create(Role role) {
        LOGGER.debug("Creating a new Role with information: {}", role);
        Role roleCreated = this.wmGenericDao.create(role);
        if(roleCreated.getUsers() != null) {
            for(User user : roleCreated.getUsers()) {
                user.setRole(roleCreated);
                LOGGER.debug("Creating a new child User with information: {}", user);
                userService.create(user);
            }
        }
        return roleCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Role getById(Integer roleId) throws EntityNotFoundException {
        LOGGER.debug("Finding Role by id: {}", roleId);
        Role role = this.wmGenericDao.findById(roleId);
        if (role == null){
            LOGGER.debug("No Role found with id: {}", roleId);
            throw new EntityNotFoundException(String.valueOf(roleId));
        }
        return role;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Role findById(Integer roleId) {
        LOGGER.debug("Finding Role by id: {}", roleId);
        return this.wmGenericDao.findById(roleId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public Role update(Role role) throws EntityNotFoundException {
        LOGGER.debug("Updating Role with information: {}", role);
        this.wmGenericDao.update(role);

        Integer roleId = role.getId();

        return this.wmGenericDao.findById(roleId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public Role delete(Integer roleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Role with id: {}", roleId);
        Role deleted = this.wmGenericDao.findById(roleId);
        if (deleted == null) {
            LOGGER.debug("No Role found with id: {}", roleId);
            throw new EntityNotFoundException(String.valueOf(roleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<Role> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Role> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table Role to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<User> findAssociatedUsers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated users");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("role.id = '" + id + "'");

        return userService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserService instance
	 */
	protected void setUserService(UserService service) {
        this.userService = service;
    }

}

