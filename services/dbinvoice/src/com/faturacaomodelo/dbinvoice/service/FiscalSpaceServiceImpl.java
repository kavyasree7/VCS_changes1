/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.FiscalSpace;
import com.faturacaomodelo.dbinvoice.Tax;


/**
 * ServiceImpl object for domain model class FiscalSpace.
 *
 * @see FiscalSpace
 */
@Service("dbinvoice.FiscalSpaceService")
public class FiscalSpaceServiceImpl implements FiscalSpaceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FiscalSpaceServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.TaxService")
	private TaxService taxService;

    @Autowired
    @Qualifier("dbinvoice.FiscalSpaceDao")
    private WMGenericDao<FiscalSpace, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FiscalSpace, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public FiscalSpace create(FiscalSpace fiscalSpace) {
        LOGGER.debug("Creating a new FiscalSpace with information: {}", fiscalSpace);
        FiscalSpace fiscalSpaceCreated = this.wmGenericDao.create(fiscalSpace);
        if(fiscalSpaceCreated.getTaxes() != null) {
            for(Tax taxe : fiscalSpaceCreated.getTaxes()) {
                taxe.setFiscalSpace(fiscalSpaceCreated);
                LOGGER.debug("Creating a new child Tax with information: {}", taxe);
                taxService.create(taxe);
            }
        }
        return fiscalSpaceCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public FiscalSpace getById(Integer fiscalspaceId) throws EntityNotFoundException {
        LOGGER.debug("Finding FiscalSpace by id: {}", fiscalspaceId);
        FiscalSpace fiscalSpace = this.wmGenericDao.findById(fiscalspaceId);
        if (fiscalSpace == null){
            LOGGER.debug("No FiscalSpace found with id: {}", fiscalspaceId);
            throw new EntityNotFoundException(String.valueOf(fiscalspaceId));
        }
        return fiscalSpace;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public FiscalSpace findById(Integer fiscalspaceId) {
        LOGGER.debug("Finding FiscalSpace by id: {}", fiscalspaceId);
        return this.wmGenericDao.findById(fiscalspaceId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public FiscalSpace update(FiscalSpace fiscalSpace) throws EntityNotFoundException {
        LOGGER.debug("Updating FiscalSpace with information: {}", fiscalSpace);
        this.wmGenericDao.update(fiscalSpace);

        Integer fiscalspaceId = fiscalSpace.getId();

        return this.wmGenericDao.findById(fiscalspaceId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public FiscalSpace delete(Integer fiscalspaceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting FiscalSpace with id: {}", fiscalspaceId);
        FiscalSpace deleted = this.wmGenericDao.findById(fiscalspaceId);
        if (deleted == null) {
            LOGGER.debug("No FiscalSpace found with id: {}", fiscalspaceId);
            throw new EntityNotFoundException(String.valueOf(fiscalspaceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<FiscalSpace> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FiscalSpaces");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<FiscalSpace> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FiscalSpaces");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table FiscalSpace to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Tax> findAssociatedTaxes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taxes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("fiscalSpace.id = '" + id + "'");

        return taxService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxService instance
	 */
	protected void setTaxService(TaxService service) {
        this.taxService = service;
    }

}

