/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.Invoice;
import com.faturacaomodelo.dbinvoice.PaymentTerm;


/**
 * ServiceImpl object for domain model class PaymentTerm.
 *
 * @see PaymentTerm
 */
@Service("dbinvoice.PaymentTermService")
public class PaymentTermServiceImpl implements PaymentTermService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentTermServiceImpl.class);

    @Autowired
	@Qualifier("dbinvoice.InvoiceService")
	private InvoiceService invoiceService;

    @Autowired
    @Qualifier("dbinvoice.PaymentTermDao")
    private WMGenericDao<PaymentTerm, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PaymentTerm, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public PaymentTerm create(PaymentTerm paymentTerm) {
        LOGGER.debug("Creating a new PaymentTerm with information: {}", paymentTerm);
        PaymentTerm paymentTermCreated = this.wmGenericDao.create(paymentTerm);
        if(paymentTermCreated.getInvoices() != null) {
            for(Invoice invoice : paymentTermCreated.getInvoices()) {
                invoice.setPaymentTerm(paymentTermCreated);
                LOGGER.debug("Creating a new child Invoice with information: {}", invoice);
                invoiceService.create(invoice);
            }
        }
        return paymentTermCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public PaymentTerm getById(Integer paymenttermId) throws EntityNotFoundException {
        LOGGER.debug("Finding PaymentTerm by id: {}", paymenttermId);
        PaymentTerm paymentTerm = this.wmGenericDao.findById(paymenttermId);
        if (paymentTerm == null){
            LOGGER.debug("No PaymentTerm found with id: {}", paymenttermId);
            throw new EntityNotFoundException(String.valueOf(paymenttermId));
        }
        return paymentTerm;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public PaymentTerm findById(Integer paymenttermId) {
        LOGGER.debug("Finding PaymentTerm by id: {}", paymenttermId);
        return this.wmGenericDao.findById(paymenttermId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public PaymentTerm update(PaymentTerm paymentTerm) throws EntityNotFoundException {
        LOGGER.debug("Updating PaymentTerm with information: {}", paymentTerm);
        this.wmGenericDao.update(paymentTerm);

        Integer paymenttermId = paymentTerm.getId();

        return this.wmGenericDao.findById(paymenttermId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public PaymentTerm delete(Integer paymenttermId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PaymentTerm with id: {}", paymenttermId);
        PaymentTerm deleted = this.wmGenericDao.findById(paymenttermId);
        if (deleted == null) {
            LOGGER.debug("No PaymentTerm found with id: {}", paymenttermId);
            throw new EntityNotFoundException(String.valueOf(paymenttermId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<PaymentTerm> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PaymentTerms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<PaymentTerm> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PaymentTerms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table PaymentTerm to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<Invoice> findAssociatedInvoices(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated invoices");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("paymentTerm.id = '" + id + "'");

        return invoiceService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoiceService instance
	 */
	protected void setInvoiceService(InvoiceService service) {
        this.invoiceService = service;
    }

}

