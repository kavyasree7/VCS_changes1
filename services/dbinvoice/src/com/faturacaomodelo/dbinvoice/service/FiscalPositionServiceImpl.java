/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.FiscalPosition;


/**
 * ServiceImpl object for domain model class FiscalPosition.
 *
 * @see FiscalPosition
 */
@Service("dbinvoice.FiscalPositionService")
public class FiscalPositionServiceImpl implements FiscalPositionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FiscalPositionServiceImpl.class);


    @Autowired
    @Qualifier("dbinvoice.FiscalPositionDao")
    private WMGenericDao<FiscalPosition, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FiscalPosition, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public FiscalPosition create(FiscalPosition fiscalPosition) {
        LOGGER.debug("Creating a new FiscalPosition with information: {}", fiscalPosition);
        FiscalPosition fiscalPositionCreated = this.wmGenericDao.create(fiscalPosition);
        return fiscalPositionCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public FiscalPosition getById(Integer fiscalpositionId) throws EntityNotFoundException {
        LOGGER.debug("Finding FiscalPosition by id: {}", fiscalpositionId);
        FiscalPosition fiscalPosition = this.wmGenericDao.findById(fiscalpositionId);
        if (fiscalPosition == null){
            LOGGER.debug("No FiscalPosition found with id: {}", fiscalpositionId);
            throw new EntityNotFoundException(String.valueOf(fiscalpositionId));
        }
        return fiscalPosition;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public FiscalPosition findById(Integer fiscalpositionId) {
        LOGGER.debug("Finding FiscalPosition by id: {}", fiscalpositionId);
        return this.wmGenericDao.findById(fiscalpositionId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public FiscalPosition update(FiscalPosition fiscalPosition) throws EntityNotFoundException {
        LOGGER.debug("Updating FiscalPosition with information: {}", fiscalPosition);
        this.wmGenericDao.update(fiscalPosition);

        Integer fiscalpositionId = fiscalPosition.getId();

        return this.wmGenericDao.findById(fiscalpositionId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public FiscalPosition delete(Integer fiscalpositionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting FiscalPosition with id: {}", fiscalpositionId);
        FiscalPosition deleted = this.wmGenericDao.findById(fiscalpositionId);
        if (deleted == null) {
            LOGGER.debug("No FiscalPosition found with id: {}", fiscalpositionId);
            throw new EntityNotFoundException(String.valueOf(fiscalpositionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<FiscalPosition> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FiscalPositions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<FiscalPosition> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FiscalPositions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table FiscalPosition to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

