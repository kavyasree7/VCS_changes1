/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbinvoice.AccountMoveLine;


/**
 * ServiceImpl object for domain model class AccountMoveLine.
 *
 * @see AccountMoveLine
 */
@Service("dbinvoice.AccountMoveLineService")
public class AccountMoveLineServiceImpl implements AccountMoveLineService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountMoveLineServiceImpl.class);


    @Autowired
    @Qualifier("dbinvoice.AccountMoveLineDao")
    private WMGenericDao<AccountMoveLine, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AccountMoveLine, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbinvoiceTransactionManager")
    @Override
	public AccountMoveLine create(AccountMoveLine accountMoveLine) {
        LOGGER.debug("Creating a new AccountMoveLine with information: {}", accountMoveLine);
        AccountMoveLine accountMoveLineCreated = this.wmGenericDao.create(accountMoveLine);
        return accountMoveLineCreated;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public AccountMoveLine getById(Integer accountmovelineId) throws EntityNotFoundException {
        LOGGER.debug("Finding AccountMoveLine by id: {}", accountmovelineId);
        AccountMoveLine accountMoveLine = this.wmGenericDao.findById(accountmovelineId);
        if (accountMoveLine == null){
            LOGGER.debug("No AccountMoveLine found with id: {}", accountmovelineId);
            throw new EntityNotFoundException(String.valueOf(accountmovelineId));
        }
        return accountMoveLine;
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public AccountMoveLine findById(Integer accountmovelineId) {
        LOGGER.debug("Finding AccountMoveLine by id: {}", accountmovelineId);
        return this.wmGenericDao.findById(accountmovelineId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbinvoiceTransactionManager")
	@Override
	public AccountMoveLine update(AccountMoveLine accountMoveLine) throws EntityNotFoundException {
        LOGGER.debug("Updating AccountMoveLine with information: {}", accountMoveLine);
        this.wmGenericDao.update(accountMoveLine);

        Integer accountmovelineId = accountMoveLine.getId();

        return this.wmGenericDao.findById(accountmovelineId);
    }

    @Transactional(value = "dbinvoiceTransactionManager")
	@Override
	public AccountMoveLine delete(Integer accountmovelineId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccountMoveLine with id: {}", accountmovelineId);
        AccountMoveLine deleted = this.wmGenericDao.findById(accountmovelineId);
        if (deleted == null) {
            LOGGER.debug("No AccountMoveLine found with id: {}", accountmovelineId);
            throw new EntityNotFoundException(String.valueOf(accountmovelineId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public Page<AccountMoveLine> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AccountMoveLines");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Page<AccountMoveLine> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AccountMoveLines");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbinvoice for table AccountMoveLine to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbinvoiceTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

