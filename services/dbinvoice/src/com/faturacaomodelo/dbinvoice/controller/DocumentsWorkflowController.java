/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.DocumentsWorkflow;
import com.faturacaomodelo.dbinvoice.Invoice;
import com.faturacaomodelo.dbinvoice.service.DocumentsWorkflowService;


/**
 * Controller object for domain model class DocumentsWorkflow.
 * @see DocumentsWorkflow
 */
@RestController("dbinvoice.DocumentsWorkflowController")
@Api(value = "DocumentsWorkflowController", description = "Exposes APIs to work with DocumentsWorkflow resource.")
@RequestMapping("/dbinvoice/DocumentsWorkflow")
public class DocumentsWorkflowController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocumentsWorkflowController.class);

    @Autowired
	@Qualifier("dbinvoice.DocumentsWorkflowService")
	private DocumentsWorkflowService documentsWorkflowService;

	@ApiOperation(value = "Creates a new DocumentsWorkflow instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public DocumentsWorkflow createDocumentsWorkflow(@RequestBody DocumentsWorkflow documentsWorkflow) {
		LOGGER.debug("Create DocumentsWorkflow with information: {}" , documentsWorkflow);

		documentsWorkflow = documentsWorkflowService.create(documentsWorkflow);
		LOGGER.debug("Created DocumentsWorkflow with information: {}" , documentsWorkflow);

	    return documentsWorkflow;
	}


    @ApiOperation(value = "Returns the DocumentsWorkflow instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DocumentsWorkflow getDocumentsWorkflow(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DocumentsWorkflow with id: {}" , id);

        DocumentsWorkflow foundDocumentsWorkflow = documentsWorkflowService.getById(id);
        LOGGER.debug("DocumentsWorkflow details with id: {}" , foundDocumentsWorkflow);

        return foundDocumentsWorkflow;
    }

    @ApiOperation(value = "Updates the DocumentsWorkflow instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DocumentsWorkflow editDocumentsWorkflow(@PathVariable("id") Integer id, @RequestBody DocumentsWorkflow documentsWorkflow) throws EntityNotFoundException {
        LOGGER.debug("Editing DocumentsWorkflow with id: {}" , documentsWorkflow.getId());

        documentsWorkflow.setId(id);
        documentsWorkflow = documentsWorkflowService.update(documentsWorkflow);
        LOGGER.debug("DocumentsWorkflow details with id: {}" , documentsWorkflow);

        return documentsWorkflow;
    }

    @ApiOperation(value = "Deletes the DocumentsWorkflow instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDocumentsWorkflow(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DocumentsWorkflow with id: {}" , id);

        DocumentsWorkflow deletedDocumentsWorkflow = documentsWorkflowService.delete(id);

        return deletedDocumentsWorkflow != null;
    }

    /**
     * @deprecated Use {@link #findDocumentsWorkflows(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DocumentsWorkflow instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentsWorkflow> searchDocumentsWorkflowsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DocumentsWorkflows list");
        return documentsWorkflowService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DocumentsWorkflow instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentsWorkflow> findDocumentsWorkflows(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DocumentsWorkflows list");
        return documentsWorkflowService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DocumentsWorkflow instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentsWorkflow> filterDocumentsWorkflows(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DocumentsWorkflows list");
        return documentsWorkflowService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDocumentsWorkflows(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return documentsWorkflowService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of DocumentsWorkflow instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDocumentsWorkflows( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DocumentsWorkflows");
		return documentsWorkflowService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDocumentsWorkflowAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return documentsWorkflowService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/invoices", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the invoices instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Invoice> findAssociatedInvoices(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated invoices");
        return documentsWorkflowService.findAssociatedInvoices(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DocumentsWorkflowService instance
	 */
	protected void setDocumentsWorkflowService(DocumentsWorkflowService service) {
		this.documentsWorkflowService = service;
	}

}

