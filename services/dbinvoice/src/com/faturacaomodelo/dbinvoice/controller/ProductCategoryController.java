/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Product;
import com.faturacaomodelo.dbinvoice.ProductCategory;
import com.faturacaomodelo.dbinvoice.service.ProductCategoryService;


/**
 * Controller object for domain model class ProductCategory.
 * @see ProductCategory
 */
@RestController("dbinvoice.ProductCategoryController")
@Api(value = "ProductCategoryController", description = "Exposes APIs to work with ProductCategory resource.")
@RequestMapping("/dbinvoice/ProductCategory")
public class ProductCategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductCategoryController.class);

    @Autowired
	@Qualifier("dbinvoice.ProductCategoryService")
	private ProductCategoryService productCategoryService;

	@ApiOperation(value = "Creates a new ProductCategory instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public ProductCategory createProductCategory(@RequestBody ProductCategory productCategory) {
		LOGGER.debug("Create ProductCategory with information: {}" , productCategory);

		productCategory = productCategoryService.create(productCategory);
		LOGGER.debug("Created ProductCategory with information: {}" , productCategory);

	    return productCategory;
	}


    @ApiOperation(value = "Returns the ProductCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductCategory getProductCategory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ProductCategory with id: {}" , id);

        ProductCategory foundProductCategory = productCategoryService.getById(id);
        LOGGER.debug("ProductCategory details with id: {}" , foundProductCategory);

        return foundProductCategory;
    }

    @ApiOperation(value = "Updates the ProductCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductCategory editProductCategory(@PathVariable("id") Integer id, @RequestBody ProductCategory productCategory) throws EntityNotFoundException {
        LOGGER.debug("Editing ProductCategory with id: {}" , productCategory.getId());

        productCategory.setId(id);
        productCategory = productCategoryService.update(productCategory);
        LOGGER.debug("ProductCategory details with id: {}" , productCategory);

        return productCategory;
    }

    @ApiOperation(value = "Deletes the ProductCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProductCategory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProductCategory with id: {}" , id);

        ProductCategory deletedProductCategory = productCategoryService.delete(id);

        return deletedProductCategory != null;
    }

    /**
     * @deprecated Use {@link #findProductCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ProductCategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductCategory> searchProductCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ProductCategories list");
        return productCategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProductCategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductCategory> findProductCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProductCategories list");
        return productCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProductCategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductCategory> filterProductCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProductCategories list");
        return productCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProductCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return productCategoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ProductCategory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countProductCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ProductCategories");
		return productCategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getProductCategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return productCategoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/products", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the products instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Product> findAssociatedProducts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated products");
        return productCategoryService.findAssociatedProducts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductCategoryService instance
	 */
	protected void setProductCategoryService(ProductCategoryService service) {
		this.productCategoryService = service;
	}

}

