/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.FiscalPosition;
import com.faturacaomodelo.dbinvoice.service.FiscalPositionService;


/**
 * Controller object for domain model class FiscalPosition.
 * @see FiscalPosition
 */
@RestController("dbinvoice.FiscalPositionController")
@Api(value = "FiscalPositionController", description = "Exposes APIs to work with FiscalPosition resource.")
@RequestMapping("/dbinvoice/FiscalPosition")
public class FiscalPositionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FiscalPositionController.class);

    @Autowired
	@Qualifier("dbinvoice.FiscalPositionService")
	private FiscalPositionService fiscalPositionService;

	@ApiOperation(value = "Creates a new FiscalPosition instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public FiscalPosition createFiscalPosition(@RequestBody FiscalPosition fiscalPosition) {
		LOGGER.debug("Create FiscalPosition with information: {}" , fiscalPosition);

		fiscalPosition = fiscalPositionService.create(fiscalPosition);
		LOGGER.debug("Created FiscalPosition with information: {}" , fiscalPosition);

	    return fiscalPosition;
	}


    @ApiOperation(value = "Returns the FiscalPosition instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FiscalPosition getFiscalPosition(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting FiscalPosition with id: {}" , id);

        FiscalPosition foundFiscalPosition = fiscalPositionService.getById(id);
        LOGGER.debug("FiscalPosition details with id: {}" , foundFiscalPosition);

        return foundFiscalPosition;
    }

    @ApiOperation(value = "Updates the FiscalPosition instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FiscalPosition editFiscalPosition(@PathVariable("id") Integer id, @RequestBody FiscalPosition fiscalPosition) throws EntityNotFoundException {
        LOGGER.debug("Editing FiscalPosition with id: {}" , fiscalPosition.getId());

        fiscalPosition.setId(id);
        fiscalPosition = fiscalPositionService.update(fiscalPosition);
        LOGGER.debug("FiscalPosition details with id: {}" , fiscalPosition);

        return fiscalPosition;
    }

    @ApiOperation(value = "Deletes the FiscalPosition instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFiscalPosition(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting FiscalPosition with id: {}" , id);

        FiscalPosition deletedFiscalPosition = fiscalPositionService.delete(id);

        return deletedFiscalPosition != null;
    }

    /**
     * @deprecated Use {@link #findFiscalPositions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FiscalPosition instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FiscalPosition> searchFiscalPositionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FiscalPositions list");
        return fiscalPositionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FiscalPosition instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FiscalPosition> findFiscalPositions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FiscalPositions list");
        return fiscalPositionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FiscalPosition instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FiscalPosition> filterFiscalPositions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FiscalPositions list");
        return fiscalPositionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFiscalPositions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return fiscalPositionService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of FiscalPosition instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFiscalPositions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FiscalPositions");
		return fiscalPositionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFiscalPositionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return fiscalPositionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FiscalPositionService instance
	 */
	protected void setFiscalPositionService(FiscalPositionService service) {
		this.fiscalPositionService = service;
	}

}

