/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Business;
import com.faturacaomodelo.dbinvoice.Contact;
import com.faturacaomodelo.dbinvoice.Country;
import com.faturacaomodelo.dbinvoice.Currency;
import com.faturacaomodelo.dbinvoice.Invoice;
import com.faturacaomodelo.dbinvoice.Journal;
import com.faturacaomodelo.dbinvoice.Partner;
import com.faturacaomodelo.dbinvoice.Quotation;
import com.faturacaomodelo.dbinvoice.service.CurrencyService;


/**
 * Controller object for domain model class Currency.
 * @see Currency
 */
@RestController("dbinvoice.CurrencyController")
@Api(value = "CurrencyController", description = "Exposes APIs to work with Currency resource.")
@RequestMapping("/dbinvoice/Currency")
public class CurrencyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CurrencyController.class);

    @Autowired
	@Qualifier("dbinvoice.CurrencyService")
	private CurrencyService currencyService;

	@ApiOperation(value = "Creates a new Currency instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Currency createCurrency(@RequestBody Currency currencyInstance) {
		LOGGER.debug("Create Currency with information: {}" , currencyInstance);

		currencyInstance = currencyService.create(currencyInstance);
		LOGGER.debug("Created Currency with information: {}" , currencyInstance);

	    return currencyInstance;
	}


    @ApiOperation(value = "Returns the Currency instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Currency getCurrency(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Currency with id: {}" , id);

        Currency foundCurrency = currencyService.getById(id);
        LOGGER.debug("Currency details with id: {}" , foundCurrency);

        return foundCurrency;
    }

    @ApiOperation(value = "Updates the Currency instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Currency editCurrency(@PathVariable("id") Integer id, @RequestBody Currency currencyInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing Currency with id: {}" , currencyInstance.getId());

        currencyInstance.setId(id);
        currencyInstance = currencyService.update(currencyInstance);
        LOGGER.debug("Currency details with id: {}" , currencyInstance);

        return currencyInstance;
    }

    @ApiOperation(value = "Deletes the Currency instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCurrency(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Currency with id: {}" , id);

        Currency deletedCurrency = currencyService.delete(id);

        return deletedCurrency != null;
    }

    /**
     * @deprecated Use {@link #findCurrencies(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Currency instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Currency> searchCurrenciesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Currencies list");
        return currencyService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Currency instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Currency> findCurrencies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Currencies list");
        return currencyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Currency instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Currency> filterCurrencies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Currencies list");
        return currencyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCurrencies(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return currencyService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Currency instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCurrencies( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Currencies");
		return currencyService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCurrencyAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return currencyService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> findAssociatedBusinesses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesses");
        return currencyService.findAssociatedBusinesses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/contacts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the contacts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Contact> findAssociatedContacts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated contacts");
        return currencyService.findAssociatedContacts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/countries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the countries instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Country> findAssociatedCountries(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated countries");
        return currencyService.findAssociatedCountries(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/invoices", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the invoices instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Invoice> findAssociatedInvoices(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated invoices");
        return currencyService.findAssociatedInvoices(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/journals", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the journals instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Journal> findAssociatedJournals(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated journals");
        return currencyService.findAssociatedJournals(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/partners", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the partners instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Partner> findAssociatedPartners(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated partners");
        return currencyService.findAssociatedPartners(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/quotations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the quotations instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Quotation> findAssociatedQuotations(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated quotations");
        return currencyService.findAssociatedQuotations(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CurrencyService instance
	 */
	protected void setCurrencyService(CurrencyService service) {
		this.currencyService = service;
	}

}

