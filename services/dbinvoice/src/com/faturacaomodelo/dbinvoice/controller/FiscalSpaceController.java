/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.FiscalSpace;
import com.faturacaomodelo.dbinvoice.Tax;
import com.faturacaomodelo.dbinvoice.service.FiscalSpaceService;


/**
 * Controller object for domain model class FiscalSpace.
 * @see FiscalSpace
 */
@RestController("dbinvoice.FiscalSpaceController")
@Api(value = "FiscalSpaceController", description = "Exposes APIs to work with FiscalSpace resource.")
@RequestMapping("/dbinvoice/FiscalSpace")
public class FiscalSpaceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FiscalSpaceController.class);

    @Autowired
	@Qualifier("dbinvoice.FiscalSpaceService")
	private FiscalSpaceService fiscalSpaceService;

	@ApiOperation(value = "Creates a new FiscalSpace instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public FiscalSpace createFiscalSpace(@RequestBody FiscalSpace fiscalSpace) {
		LOGGER.debug("Create FiscalSpace with information: {}" , fiscalSpace);

		fiscalSpace = fiscalSpaceService.create(fiscalSpace);
		LOGGER.debug("Created FiscalSpace with information: {}" , fiscalSpace);

	    return fiscalSpace;
	}


    @ApiOperation(value = "Returns the FiscalSpace instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FiscalSpace getFiscalSpace(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting FiscalSpace with id: {}" , id);

        FiscalSpace foundFiscalSpace = fiscalSpaceService.getById(id);
        LOGGER.debug("FiscalSpace details with id: {}" , foundFiscalSpace);

        return foundFiscalSpace;
    }

    @ApiOperation(value = "Updates the FiscalSpace instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FiscalSpace editFiscalSpace(@PathVariable("id") Integer id, @RequestBody FiscalSpace fiscalSpace) throws EntityNotFoundException {
        LOGGER.debug("Editing FiscalSpace with id: {}" , fiscalSpace.getId());

        fiscalSpace.setId(id);
        fiscalSpace = fiscalSpaceService.update(fiscalSpace);
        LOGGER.debug("FiscalSpace details with id: {}" , fiscalSpace);

        return fiscalSpace;
    }

    @ApiOperation(value = "Deletes the FiscalSpace instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFiscalSpace(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting FiscalSpace with id: {}" , id);

        FiscalSpace deletedFiscalSpace = fiscalSpaceService.delete(id);

        return deletedFiscalSpace != null;
    }

    /**
     * @deprecated Use {@link #findFiscalSpaces(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FiscalSpace instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FiscalSpace> searchFiscalSpacesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FiscalSpaces list");
        return fiscalSpaceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FiscalSpace instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FiscalSpace> findFiscalSpaces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FiscalSpaces list");
        return fiscalSpaceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FiscalSpace instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FiscalSpace> filterFiscalSpaces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FiscalSpaces list");
        return fiscalSpaceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFiscalSpaces(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return fiscalSpaceService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of FiscalSpace instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFiscalSpaces( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FiscalSpaces");
		return fiscalSpaceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFiscalSpaceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return fiscalSpaceService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/taxes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the taxes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tax> findAssociatedTaxes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated taxes");
        return fiscalSpaceService.findAssociatedTaxes(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FiscalSpaceService instance
	 */
	protected void setFiscalSpaceService(FiscalSpaceService service) {
		this.fiscalSpaceService = service;
	}

}

