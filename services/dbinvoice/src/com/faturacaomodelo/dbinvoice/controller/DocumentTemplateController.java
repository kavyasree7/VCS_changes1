/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Business;
import com.faturacaomodelo.dbinvoice.DocumentTemplate;
import com.faturacaomodelo.dbinvoice.service.DocumentTemplateService;


/**
 * Controller object for domain model class DocumentTemplate.
 * @see DocumentTemplate
 */
@RestController("dbinvoice.DocumentTemplateController")
@Api(value = "DocumentTemplateController", description = "Exposes APIs to work with DocumentTemplate resource.")
@RequestMapping("/dbinvoice/DocumentTemplate")
public class DocumentTemplateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocumentTemplateController.class);

    @Autowired
	@Qualifier("dbinvoice.DocumentTemplateService")
	private DocumentTemplateService documentTemplateService;

	@ApiOperation(value = "Creates a new DocumentTemplate instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public DocumentTemplate createDocumentTemplate(@RequestBody DocumentTemplate documentTemplate) {
		LOGGER.debug("Create DocumentTemplate with information: {}" , documentTemplate);

		documentTemplate = documentTemplateService.create(documentTemplate);
		LOGGER.debug("Created DocumentTemplate with information: {}" , documentTemplate);

	    return documentTemplate;
	}


    @ApiOperation(value = "Returns the DocumentTemplate instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DocumentTemplate getDocumentTemplate(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DocumentTemplate with id: {}" , id);

        DocumentTemplate foundDocumentTemplate = documentTemplateService.getById(id);
        LOGGER.debug("DocumentTemplate details with id: {}" , foundDocumentTemplate);

        return foundDocumentTemplate;
    }

    @ApiOperation(value = "Updates the DocumentTemplate instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DocumentTemplate editDocumentTemplate(@PathVariable("id") Integer id, @RequestBody DocumentTemplate documentTemplate) throws EntityNotFoundException {
        LOGGER.debug("Editing DocumentTemplate with id: {}" , documentTemplate.getId());

        documentTemplate.setId(id);
        documentTemplate = documentTemplateService.update(documentTemplate);
        LOGGER.debug("DocumentTemplate details with id: {}" , documentTemplate);

        return documentTemplate;
    }

    @ApiOperation(value = "Deletes the DocumentTemplate instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDocumentTemplate(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DocumentTemplate with id: {}" , id);

        DocumentTemplate deletedDocumentTemplate = documentTemplateService.delete(id);

        return deletedDocumentTemplate != null;
    }

    /**
     * @deprecated Use {@link #findDocumentTemplates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DocumentTemplate instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentTemplate> searchDocumentTemplatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DocumentTemplates list");
        return documentTemplateService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DocumentTemplate instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentTemplate> findDocumentTemplates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DocumentTemplates list");
        return documentTemplateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DocumentTemplate instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DocumentTemplate> filterDocumentTemplates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DocumentTemplates list");
        return documentTemplateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDocumentTemplates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return documentTemplateService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of DocumentTemplate instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDocumentTemplates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DocumentTemplates");
		return documentTemplateService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDocumentTemplateAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return documentTemplateService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> findAssociatedBusinesses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesses");
        return documentTemplateService.findAssociatedBusinesses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DocumentTemplateService instance
	 */
	protected void setDocumentTemplateService(DocumentTemplateService service) {
		this.documentTemplateService = service;
	}

}

