/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Business;
import com.faturacaomodelo.dbinvoice.BusinessType;
import com.faturacaomodelo.dbinvoice.service.BusinessTypeService;


/**
 * Controller object for domain model class BusinessType.
 * @see BusinessType
 */
@RestController("dbinvoice.BusinessTypeController")
@Api(value = "BusinessTypeController", description = "Exposes APIs to work with BusinessType resource.")
@RequestMapping("/dbinvoice/BusinessType")
public class BusinessTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessTypeController.class);

    @Autowired
	@Qualifier("dbinvoice.BusinessTypeService")
	private BusinessTypeService businessTypeService;

	@ApiOperation(value = "Creates a new BusinessType instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public BusinessType createBusinessType(@RequestBody BusinessType businessType) {
		LOGGER.debug("Create BusinessType with information: {}" , businessType);

		businessType = businessTypeService.create(businessType);
		LOGGER.debug("Created BusinessType with information: {}" , businessType);

	    return businessType;
	}


    @ApiOperation(value = "Returns the BusinessType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BusinessType getBusinessType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BusinessType with id: {}" , id);

        BusinessType foundBusinessType = businessTypeService.getById(id);
        LOGGER.debug("BusinessType details with id: {}" , foundBusinessType);

        return foundBusinessType;
    }

    @ApiOperation(value = "Updates the BusinessType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BusinessType editBusinessType(@PathVariable("id") Integer id, @RequestBody BusinessType businessType) throws EntityNotFoundException {
        LOGGER.debug("Editing BusinessType with id: {}" , businessType.getId());

        businessType.setId(id);
        businessType = businessTypeService.update(businessType);
        LOGGER.debug("BusinessType details with id: {}" , businessType);

        return businessType;
    }

    @ApiOperation(value = "Deletes the BusinessType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinessType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BusinessType with id: {}" , id);

        BusinessType deletedBusinessType = businessTypeService.delete(id);

        return deletedBusinessType != null;
    }

    /**
     * @deprecated Use {@link #findBusinessTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BusinessType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BusinessType> searchBusinessTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BusinessTypes list");
        return businessTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BusinessType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BusinessType> findBusinessTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BusinessTypes list");
        return businessTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BusinessType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BusinessType> filterBusinessTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BusinessTypes list");
        return businessTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinessTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businessTypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of BusinessType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinessTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BusinessTypes");
		return businessTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinessTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businessTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/businesses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the businesses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Business> findAssociatedBusinesses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated businesses");
        return businessTypeService.findAssociatedBusinesses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessTypeService instance
	 */
	protected void setBusinessTypeService(BusinessTypeService service) {
		this.businessTypeService = service;
	}

}

