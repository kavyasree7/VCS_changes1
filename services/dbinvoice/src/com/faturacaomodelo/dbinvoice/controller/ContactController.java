/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Contact;
import com.faturacaomodelo.dbinvoice.LeadContactRel;
import com.faturacaomodelo.dbinvoice.PartnerContactRel;
import com.faturacaomodelo.dbinvoice.service.ContactService;


/**
 * Controller object for domain model class Contact.
 * @see Contact
 */
@RestController("dbinvoice.ContactController")
@Api(value = "ContactController", description = "Exposes APIs to work with Contact resource.")
@RequestMapping("/dbinvoice/Contact")
public class ContactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContactController.class);

    @Autowired
	@Qualifier("dbinvoice.ContactService")
	private ContactService contactService;

	@ApiOperation(value = "Creates a new Contact instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Contact createContact(@RequestBody Contact contact) {
		LOGGER.debug("Create Contact with information: {}" , contact);

		contact = contactService.create(contact);
		LOGGER.debug("Created Contact with information: {}" , contact);

	    return contact;
	}


    @ApiOperation(value = "Returns the Contact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Contact getContact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Contact with id: {}" , id);

        Contact foundContact = contactService.getById(id);
        LOGGER.debug("Contact details with id: {}" , foundContact);

        return foundContact;
    }

    @ApiOperation(value = "Updates the Contact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Contact editContact(@PathVariable("id") Integer id, @RequestBody Contact contact) throws EntityNotFoundException {
        LOGGER.debug("Editing Contact with id: {}" , contact.getId());

        contact.setId(id);
        contact = contactService.update(contact);
        LOGGER.debug("Contact details with id: {}" , contact);

        return contact;
    }

    @ApiOperation(value = "Deletes the Contact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteContact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Contact with id: {}" , id);

        Contact deletedContact = contactService.delete(id);

        return deletedContact != null;
    }

    /**
     * @deprecated Use {@link #findContacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Contact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Contact> searchContactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Contacts list");
        return contactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Contact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Contact> findContacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Contacts list");
        return contactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Contact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Contact> filterContacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Contacts list");
        return contactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportContacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return contactService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Contact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countContacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Contacts");
		return contactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getContactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return contactService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/leadContactRels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the leadContactRels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadContactRel> findAssociatedLeadContactRels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated leadContactRels");
        return contactService.findAssociatedLeadContactRels(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/partnerContactRels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the partnerContactRels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerContactRel> findAssociatedPartnerContactRels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated partnerContactRels");
        return contactService.findAssociatedPartnerContactRels(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ContactService instance
	 */
	protected void setContactService(ContactService service) {
		this.contactService = service;
	}

}

