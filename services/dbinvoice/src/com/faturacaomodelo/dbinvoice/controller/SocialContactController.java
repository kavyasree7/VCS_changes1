/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.SocialContact;
import com.faturacaomodelo.dbinvoice.service.SocialContactService;


/**
 * Controller object for domain model class SocialContact.
 * @see SocialContact
 */
@RestController("dbinvoice.SocialContactController")
@Api(value = "SocialContactController", description = "Exposes APIs to work with SocialContact resource.")
@RequestMapping("/dbinvoice/SocialContact")
public class SocialContactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SocialContactController.class);

    @Autowired
	@Qualifier("dbinvoice.SocialContactService")
	private SocialContactService socialContactService;

	@ApiOperation(value = "Creates a new SocialContact instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SocialContact createSocialContact(@RequestBody SocialContact socialContact) {
		LOGGER.debug("Create SocialContact with information: {}" , socialContact);

		socialContact = socialContactService.create(socialContact);
		LOGGER.debug("Created SocialContact with information: {}" , socialContact);

	    return socialContact;
	}


    @ApiOperation(value = "Returns the SocialContact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SocialContact getSocialContact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SocialContact with id: {}" , id);

        SocialContact foundSocialContact = socialContactService.getById(id);
        LOGGER.debug("SocialContact details with id: {}" , foundSocialContact);

        return foundSocialContact;
    }

    @ApiOperation(value = "Updates the SocialContact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SocialContact editSocialContact(@PathVariable("id") Integer id, @RequestBody SocialContact socialContact) throws EntityNotFoundException {
        LOGGER.debug("Editing SocialContact with id: {}" , socialContact.getId());

        socialContact.setId(id);
        socialContact = socialContactService.update(socialContact);
        LOGGER.debug("SocialContact details with id: {}" , socialContact);

        return socialContact;
    }

    @ApiOperation(value = "Deletes the SocialContact instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSocialContact(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SocialContact with id: {}" , id);

        SocialContact deletedSocialContact = socialContactService.delete(id);

        return deletedSocialContact != null;
    }

    /**
     * @deprecated Use {@link #findSocialContacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SocialContact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SocialContact> searchSocialContactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SocialContacts list");
        return socialContactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SocialContact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SocialContact> findSocialContacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SocialContacts list");
        return socialContactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SocialContact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SocialContact> filterSocialContacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SocialContacts list");
        return socialContactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSocialContacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return socialContactService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SocialContact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSocialContacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SocialContacts");
		return socialContactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSocialContactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return socialContactService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SocialContactService instance
	 */
	protected void setSocialContactService(SocialContactService service) {
		this.socialContactService = service;
	}

}

