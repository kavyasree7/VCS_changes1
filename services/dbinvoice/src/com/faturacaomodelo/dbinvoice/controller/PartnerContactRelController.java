/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.PartnerContactRel;
import com.faturacaomodelo.dbinvoice.service.PartnerContactRelService;


/**
 * Controller object for domain model class PartnerContactRel.
 * @see PartnerContactRel
 */
@RestController("dbinvoice.PartnerContactRelController")
@Api(value = "PartnerContactRelController", description = "Exposes APIs to work with PartnerContactRel resource.")
@RequestMapping("/dbinvoice/PartnerContactRel")
public class PartnerContactRelController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartnerContactRelController.class);

    @Autowired
	@Qualifier("dbinvoice.PartnerContactRelService")
	private PartnerContactRelService partnerContactRelService;

	@ApiOperation(value = "Creates a new PartnerContactRel instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public PartnerContactRel createPartnerContactRel(@RequestBody PartnerContactRel partnerContactRel) {
		LOGGER.debug("Create PartnerContactRel with information: {}" , partnerContactRel);

		partnerContactRel = partnerContactRelService.create(partnerContactRel);
		LOGGER.debug("Created PartnerContactRel with information: {}" , partnerContactRel);

	    return partnerContactRel;
	}


    @ApiOperation(value = "Returns the PartnerContactRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartnerContactRel getPartnerContactRel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PartnerContactRel with id: {}" , id);

        PartnerContactRel foundPartnerContactRel = partnerContactRelService.getById(id);
        LOGGER.debug("PartnerContactRel details with id: {}" , foundPartnerContactRel);

        return foundPartnerContactRel;
    }

    @ApiOperation(value = "Updates the PartnerContactRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartnerContactRel editPartnerContactRel(@PathVariable("id") Integer id, @RequestBody PartnerContactRel partnerContactRel) throws EntityNotFoundException {
        LOGGER.debug("Editing PartnerContactRel with id: {}" , partnerContactRel.getId());

        partnerContactRel.setId(id);
        partnerContactRel = partnerContactRelService.update(partnerContactRel);
        LOGGER.debug("PartnerContactRel details with id: {}" , partnerContactRel);

        return partnerContactRel;
    }

    @ApiOperation(value = "Deletes the PartnerContactRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePartnerContactRel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PartnerContactRel with id: {}" , id);

        PartnerContactRel deletedPartnerContactRel = partnerContactRelService.delete(id);

        return deletedPartnerContactRel != null;
    }

    /**
     * @deprecated Use {@link #findPartnerContactRels(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PartnerContactRel instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerContactRel> searchPartnerContactRelsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PartnerContactRels list");
        return partnerContactRelService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartnerContactRel instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerContactRel> findPartnerContactRels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartnerContactRels list");
        return partnerContactRelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartnerContactRel instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerContactRel> filterPartnerContactRels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartnerContactRels list");
        return partnerContactRelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPartnerContactRels(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return partnerContactRelService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PartnerContactRel instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPartnerContactRels( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PartnerContactRels");
		return partnerContactRelService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPartnerContactRelAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return partnerContactRelService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerContactRelService instance
	 */
	protected void setPartnerContactRelService(PartnerContactRelService service) {
		this.partnerContactRelService = service;
	}

}

