/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Tax;
import com.faturacaomodelo.dbinvoice.TaxType;
import com.faturacaomodelo.dbinvoice.service.TaxTypeService;


/**
 * Controller object for domain model class TaxType.
 * @see TaxType
 */
@RestController("dbinvoice.TaxTypeController")
@Api(value = "TaxTypeController", description = "Exposes APIs to work with TaxType resource.")
@RequestMapping("/dbinvoice/TaxType")
public class TaxTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxTypeController.class);

    @Autowired
	@Qualifier("dbinvoice.TaxTypeService")
	private TaxTypeService taxTypeService;

	@ApiOperation(value = "Creates a new TaxType instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TaxType createTaxType(@RequestBody TaxType taxType) {
		LOGGER.debug("Create TaxType with information: {}" , taxType);

		taxType = taxTypeService.create(taxType);
		LOGGER.debug("Created TaxType with information: {}" , taxType);

	    return taxType;
	}


    @ApiOperation(value = "Returns the TaxType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxType getTaxType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TaxType with id: {}" , id);

        TaxType foundTaxType = taxTypeService.getById(id);
        LOGGER.debug("TaxType details with id: {}" , foundTaxType);

        return foundTaxType;
    }

    @ApiOperation(value = "Updates the TaxType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxType editTaxType(@PathVariable("id") Integer id, @RequestBody TaxType taxType) throws EntityNotFoundException {
        LOGGER.debug("Editing TaxType with id: {}" , taxType.getId());

        taxType.setId(id);
        taxType = taxTypeService.update(taxType);
        LOGGER.debug("TaxType details with id: {}" , taxType);

        return taxType;
    }

    @ApiOperation(value = "Deletes the TaxType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTaxType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TaxType with id: {}" , id);

        TaxType deletedTaxType = taxTypeService.delete(id);

        return deletedTaxType != null;
    }

    /**
     * @deprecated Use {@link #findTaxTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TaxType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxType> searchTaxTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaxTypes list");
        return taxTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxType> findTaxTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxTypes list");
        return taxTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxType> filterTaxTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxTypes list");
        return taxTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaxTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taxTypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TaxType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaxTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TaxTypes");
		return taxTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaxTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taxTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/taxes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the taxes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tax> findAssociatedTaxes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated taxes");
        return taxTypeService.findAssociatedTaxes(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxTypeService instance
	 */
	protected void setTaxTypeService(TaxTypeService service) {
		this.taxTypeService = service;
	}

}

