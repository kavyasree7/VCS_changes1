/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Lead;
import com.faturacaomodelo.dbinvoice.LeadContactRel;
import com.faturacaomodelo.dbinvoice.service.LeadService;


/**
 * Controller object for domain model class Lead.
 * @see Lead
 */
@RestController("dbinvoice.LeadController")
@Api(value = "LeadController", description = "Exposes APIs to work with Lead resource.")
@RequestMapping("/dbinvoice/Lead")
public class LeadController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeadController.class);

    @Autowired
	@Qualifier("dbinvoice.LeadService")
	private LeadService leadService;

	@ApiOperation(value = "Creates a new Lead instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Lead createLead(@RequestBody Lead lead) {
		LOGGER.debug("Create Lead with information: {}" , lead);

		lead = leadService.create(lead);
		LOGGER.debug("Created Lead with information: {}" , lead);

	    return lead;
	}


    @ApiOperation(value = "Returns the Lead instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Lead getLead(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Lead with id: {}" , id);

        Lead foundLead = leadService.getById(id);
        LOGGER.debug("Lead details with id: {}" , foundLead);

        return foundLead;
    }

    @ApiOperation(value = "Updates the Lead instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Lead editLead(@PathVariable("id") Integer id, @RequestBody Lead lead) throws EntityNotFoundException {
        LOGGER.debug("Editing Lead with id: {}" , lead.getId());

        lead.setId(id);
        lead = leadService.update(lead);
        LOGGER.debug("Lead details with id: {}" , lead);

        return lead;
    }

    @ApiOperation(value = "Deletes the Lead instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLead(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Lead with id: {}" , id);

        Lead deletedLead = leadService.delete(id);

        return deletedLead != null;
    }

    /**
     * @deprecated Use {@link #findLeads(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Lead instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Lead> searchLeadsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Leads list");
        return leadService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Lead instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Lead> findLeads(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Leads list");
        return leadService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Lead instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Lead> filterLeads(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Leads list");
        return leadService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLeads(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return leadService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Lead instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLeads( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Leads");
		return leadService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLeadAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return leadService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/leadContactRels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the leadContactRels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadContactRel> findAssociatedLeadContactRels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated leadContactRels");
        return leadService.findAssociatedLeadContactRels(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LeadService instance
	 */
	protected void setLeadService(LeadService service) {
		this.leadService = service;
	}

}

