/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.Password;
import com.faturacaomodelo.dbinvoice.service.PasswordService;


/**
 * Controller object for domain model class Password.
 * @see Password
 */
@RestController("dbinvoice.PasswordController")
@Api(value = "PasswordController", description = "Exposes APIs to work with Password resource.")
@RequestMapping("/dbinvoice/Password")
public class PasswordController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PasswordController.class);

    @Autowired
	@Qualifier("dbinvoice.PasswordService")
	private PasswordService passwordService;

	@ApiOperation(value = "Creates a new Password instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Password createPassword(@RequestBody Password passwordInstance) {
		LOGGER.debug("Create Password with information: {}" , passwordInstance);

		passwordInstance = passwordService.create(passwordInstance);
		LOGGER.debug("Created Password with information: {}" , passwordInstance);

	    return passwordInstance;
	}


    @ApiOperation(value = "Returns the Password instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Password getPassword(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Password with id: {}" , id);

        Password foundPassword = passwordService.getById(id);
        LOGGER.debug("Password details with id: {}" , foundPassword);

        return foundPassword;
    }

    @ApiOperation(value = "Updates the Password instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Password editPassword(@PathVariable("id") Integer id, @RequestBody Password passwordInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing Password with id: {}" , passwordInstance.getId());

        passwordInstance.setId(id);
        passwordInstance = passwordService.update(passwordInstance);
        LOGGER.debug("Password details with id: {}" , passwordInstance);

        return passwordInstance;
    }

    @ApiOperation(value = "Deletes the Password instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePassword(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Password with id: {}" , id);

        Password deletedPassword = passwordService.delete(id);

        return deletedPassword != null;
    }

    /**
     * @deprecated Use {@link #findPasswords(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Password instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Password> searchPasswordsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Passwords list");
        return passwordService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Password instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Password> findPasswords(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Passwords list");
        return passwordService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Password instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Password> filterPasswords(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Passwords list");
        return passwordService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPasswords(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return passwordService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Password instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPasswords( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Passwords");
		return passwordService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPasswordAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return passwordService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PasswordService instance
	 */
	protected void setPasswordService(PasswordService service) {
		this.passwordService = service;
	}

}

