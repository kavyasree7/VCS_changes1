/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbinvoice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbinvoice.CodeType;
import com.faturacaomodelo.dbinvoice.PartnerCode;
import com.faturacaomodelo.dbinvoice.service.CodeTypeService;


/**
 * Controller object for domain model class CodeType.
 * @see CodeType
 */
@RestController("dbinvoice.CodeTypeController")
@Api(value = "CodeTypeController", description = "Exposes APIs to work with CodeType resource.")
@RequestMapping("/dbinvoice/CodeType")
public class CodeTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CodeTypeController.class);

    @Autowired
	@Qualifier("dbinvoice.CodeTypeService")
	private CodeTypeService codeTypeService;

	@ApiOperation(value = "Creates a new CodeType instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CodeType createCodeType(@RequestBody CodeType codeType) {
		LOGGER.debug("Create CodeType with information: {}" , codeType);

		codeType = codeTypeService.create(codeType);
		LOGGER.debug("Created CodeType with information: {}" , codeType);

	    return codeType;
	}


    @ApiOperation(value = "Returns the CodeType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CodeType getCodeType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CodeType with id: {}" , id);

        CodeType foundCodeType = codeTypeService.getById(id);
        LOGGER.debug("CodeType details with id: {}" , foundCodeType);

        return foundCodeType;
    }

    @ApiOperation(value = "Updates the CodeType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CodeType editCodeType(@PathVariable("id") Integer id, @RequestBody CodeType codeType) throws EntityNotFoundException {
        LOGGER.debug("Editing CodeType with id: {}" , codeType.getId());

        codeType.setId(id);
        codeType = codeTypeService.update(codeType);
        LOGGER.debug("CodeType details with id: {}" , codeType);

        return codeType;
    }

    @ApiOperation(value = "Deletes the CodeType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCodeType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CodeType with id: {}" , id);

        CodeType deletedCodeType = codeTypeService.delete(id);

        return deletedCodeType != null;
    }

    /**
     * @deprecated Use {@link #findCodeTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CodeType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodeType> searchCodeTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CodeTypes list");
        return codeTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CodeType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodeType> findCodeTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CodeTypes list");
        return codeTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CodeType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodeType> filterCodeTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CodeTypes list");
        return codeTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCodeTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return codeTypeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CodeType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCodeTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CodeTypes");
		return codeTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCodeTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return codeTypeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/partnerCodes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the partnerCodes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerCode> findAssociatedPartnerCodes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated partnerCodes");
        return codeTypeService.findAssociatedPartnerCodes(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CodeTypeService instance
	 */
	protected void setCodeTypeService(CodeTypeService service) {
		this.codeTypeService = service;
	}

}

