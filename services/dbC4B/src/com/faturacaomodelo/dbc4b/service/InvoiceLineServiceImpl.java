/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b.InvoiceLine;
import com.faturacaomodelo.dbc4b.TaxInvoiceLineRel;


/**
 * ServiceImpl object for domain model class InvoiceLine.
 *
 * @see InvoiceLine
 */
@Service("dbC4B.InvoiceLineService")
public class InvoiceLineServiceImpl implements InvoiceLineService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InvoiceLineServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B.TaxInvoiceLineRelService")
	private TaxInvoiceLineRelService taxInvoiceLineRelService;

    @Autowired
    @Qualifier("dbC4B.InvoiceLineDao")
    private WMGenericDao<InvoiceLine, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InvoiceLine, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4BTransactionManager")
    @Override
	public InvoiceLine create(InvoiceLine invoiceLine) {
        LOGGER.debug("Creating a new InvoiceLine with information: {}", invoiceLine);
        InvoiceLine invoiceLineCreated = this.wmGenericDao.create(invoiceLine);
        if(invoiceLineCreated.getTaxInvoiceLineRels() != null) {
            for(TaxInvoiceLineRel taxInvoiceLineRel : invoiceLineCreated.getTaxInvoiceLineRels()) {
                taxInvoiceLineRel.setInvoiceLine(invoiceLineCreated);
                LOGGER.debug("Creating a new child TaxInvoiceLineRel with information: {}", taxInvoiceLineRel);
                taxInvoiceLineRelService.create(taxInvoiceLineRel);
            }
        }
        return invoiceLineCreated;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public InvoiceLine getById(Integer invoicelineId) throws EntityNotFoundException {
        LOGGER.debug("Finding InvoiceLine by id: {}", invoicelineId);
        InvoiceLine invoiceLine = this.wmGenericDao.findById(invoicelineId);
        if (invoiceLine == null){
            LOGGER.debug("No InvoiceLine found with id: {}", invoicelineId);
            throw new EntityNotFoundException(String.valueOf(invoicelineId));
        }
        return invoiceLine;
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public InvoiceLine findById(Integer invoicelineId) {
        LOGGER.debug("Finding InvoiceLine by id: {}", invoicelineId);
        return this.wmGenericDao.findById(invoicelineId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4BTransactionManager")
	@Override
	public InvoiceLine update(InvoiceLine invoiceLine) throws EntityNotFoundException {
        LOGGER.debug("Updating InvoiceLine with information: {}", invoiceLine);
        this.wmGenericDao.update(invoiceLine);

        Integer invoicelineId = invoiceLine.getId();

        return this.wmGenericDao.findById(invoicelineId);
    }

    @Transactional(value = "dbC4BTransactionManager")
	@Override
	public InvoiceLine delete(Integer invoicelineId) throws EntityNotFoundException {
        LOGGER.debug("Deleting InvoiceLine with id: {}", invoicelineId);
        InvoiceLine deleted = this.wmGenericDao.findById(invoicelineId);
        if (deleted == null) {
            LOGGER.debug("No InvoiceLine found with id: {}", invoicelineId);
            throw new EntityNotFoundException(String.valueOf(invoicelineId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Page<InvoiceLine> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InvoiceLines");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<InvoiceLine> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InvoiceLines");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B for table InvoiceLine to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<TaxInvoiceLineRel> findAssociatedTaxInvoiceLineRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taxInvoiceLineRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("invoiceLine.id = '" + id + "'");

        return taxInvoiceLineRelService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxInvoiceLineRelService instance
	 */
	protected void setTaxInvoiceLineRelService(TaxInvoiceLineRelService service) {
        this.taxInvoiceLineRelService = service;
    }

}

