/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b.Tax;
import com.faturacaomodelo.dbc4b.TaxType;


/**
 * ServiceImpl object for domain model class TaxType.
 *
 * @see TaxType
 */
@Service("dbC4B.TaxTypeService")
public class TaxTypeServiceImpl implements TaxTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxTypeServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B.TaxService")
	private TaxService taxService;

    @Autowired
    @Qualifier("dbC4B.TaxTypeDao")
    private WMGenericDao<TaxType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TaxType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4BTransactionManager")
    @Override
	public TaxType create(TaxType taxType) {
        LOGGER.debug("Creating a new TaxType with information: {}", taxType);
        TaxType taxTypeCreated = this.wmGenericDao.create(taxType);
        if(taxTypeCreated.getTaxes() != null) {
            for(Tax taxe : taxTypeCreated.getTaxes()) {
                taxe.setTaxType(taxTypeCreated);
                LOGGER.debug("Creating a new child Tax with information: {}", taxe);
                taxService.create(taxe);
            }
        }
        return taxTypeCreated;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public TaxType getById(Integer taxtypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding TaxType by id: {}", taxtypeId);
        TaxType taxType = this.wmGenericDao.findById(taxtypeId);
        if (taxType == null){
            LOGGER.debug("No TaxType found with id: {}", taxtypeId);
            throw new EntityNotFoundException(String.valueOf(taxtypeId));
        }
        return taxType;
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public TaxType findById(Integer taxtypeId) {
        LOGGER.debug("Finding TaxType by id: {}", taxtypeId);
        return this.wmGenericDao.findById(taxtypeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4BTransactionManager")
	@Override
	public TaxType update(TaxType taxType) throws EntityNotFoundException {
        LOGGER.debug("Updating TaxType with information: {}", taxType);
        this.wmGenericDao.update(taxType);

        Integer taxtypeId = taxType.getId();

        return this.wmGenericDao.findById(taxtypeId);
    }

    @Transactional(value = "dbC4BTransactionManager")
	@Override
	public TaxType delete(Integer taxtypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TaxType with id: {}", taxtypeId);
        TaxType deleted = this.wmGenericDao.findById(taxtypeId);
        if (deleted == null) {
            LOGGER.debug("No TaxType found with id: {}", taxtypeId);
            throw new EntityNotFoundException(String.valueOf(taxtypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Page<TaxType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TaxTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<TaxType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TaxTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B for table TaxType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Tax> findAssociatedTaxes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taxes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("taxType.id = '" + id + "'");

        return taxService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxService instance
	 */
	protected void setTaxService(TaxService service) {
        this.taxService = service;
    }

}

