/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b.Contact;
import com.faturacaomodelo.dbc4b.Country;
import com.faturacaomodelo.dbc4b.Invoice;
import com.faturacaomodelo.dbc4b.Language;
import com.faturacaomodelo.dbc4b.Partner;
import com.faturacaomodelo.dbc4b.Translation;
import com.faturacaomodelo.dbc4b.User;


/**
 * ServiceImpl object for domain model class Language.
 *
 * @see Language
 */
@Service("dbC4B.LanguageService")
public class LanguageServiceImpl implements LanguageService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LanguageServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B.InvoiceService")
	private InvoiceService invoiceService;

    @Autowired
	@Qualifier("dbC4B.TranslationService")
	private TranslationService translationService;

    @Autowired
	@Qualifier("dbC4B.ContactService")
	private ContactService contactService;

    @Autowired
	@Qualifier("dbC4B.PartnerService")
	private PartnerService partnerService;

    @Autowired
	@Qualifier("dbC4B.UserService")
	private UserService userService;

    @Autowired
	@Qualifier("dbC4B.CountryService")
	private CountryService countryService;

    @Autowired
    @Qualifier("dbC4B.LanguageDao")
    private WMGenericDao<Language, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Language, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4BTransactionManager")
    @Override
	public Language create(Language language) {
        LOGGER.debug("Creating a new Language with information: {}", language);
        Language languageCreated = this.wmGenericDao.create(language);
        if(languageCreated.getContacts() != null) {
            for(Contact contact : languageCreated.getContacts()) {
                contact.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child Contact with information: {}", contact);
                contactService.create(contact);
            }
        }

        if(languageCreated.getCountries() != null) {
            for(Country countrie : languageCreated.getCountries()) {
                countrie.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child Country with information: {}", countrie);
                countryService.create(countrie);
            }
        }

        if(languageCreated.getInvoices() != null) {
            for(Invoice invoice : languageCreated.getInvoices()) {
                invoice.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child Invoice with information: {}", invoice);
                invoiceService.create(invoice);
            }
        }

        if(languageCreated.getPartners() != null) {
            for(Partner partner : languageCreated.getPartners()) {
                partner.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child Partner with information: {}", partner);
                partnerService.create(partner);
            }
        }

        if(languageCreated.getTranslations() != null) {
            for(Translation translation : languageCreated.getTranslations()) {
                translation.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child Translation with information: {}", translation);
                translationService.create(translation);
            }
        }

        if(languageCreated.getUsers() != null) {
            for(User user : languageCreated.getUsers()) {
                user.setLanguage(languageCreated);
                LOGGER.debug("Creating a new child User with information: {}", user);
                userService.create(user);
            }
        }
        return languageCreated;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Language getById(Integer languageId) throws EntityNotFoundException {
        LOGGER.debug("Finding Language by id: {}", languageId);
        Language language = this.wmGenericDao.findById(languageId);
        if (language == null){
            LOGGER.debug("No Language found with id: {}", languageId);
            throw new EntityNotFoundException(String.valueOf(languageId));
        }
        return language;
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Language findById(Integer languageId) {
        LOGGER.debug("Finding Language by id: {}", languageId);
        return this.wmGenericDao.findById(languageId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4BTransactionManager")
	@Override
	public Language update(Language language) throws EntityNotFoundException {
        LOGGER.debug("Updating Language with information: {}", language);
        this.wmGenericDao.update(language);

        Integer languageId = language.getId();

        return this.wmGenericDao.findById(languageId);
    }

    @Transactional(value = "dbC4BTransactionManager")
	@Override
	public Language delete(Integer languageId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Language with id: {}", languageId);
        Language deleted = this.wmGenericDao.findById(languageId);
        if (deleted == null) {
            LOGGER.debug("No Language found with id: {}", languageId);
            throw new EntityNotFoundException(String.valueOf(languageId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Page<Language> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Languages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Language> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Languages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B for table Language to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Contact> findAssociatedContacts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated contacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.id = '" + id + "'");

        return contactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Country> findAssociatedCountries(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated countries");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.id = '" + id + "'");

        return countryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Invoice> findAssociatedInvoices(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated invoices");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.id = '" + id + "'");

        return invoiceService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Partner> findAssociatedPartners(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partners");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.id = '" + id + "'");

        return partnerService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Translation> findAssociatedTranslations(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated translations");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.id = '" + id + "'");

        return translationService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<User> findAssociatedUsers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated users");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("language.id = '" + id + "'");

        return userService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoiceService instance
	 */
	protected void setInvoiceService(InvoiceService service) {
        this.invoiceService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TranslationService instance
	 */
	protected void setTranslationService(TranslationService service) {
        this.translationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ContactService instance
	 */
	protected void setContactService(ContactService service) {
        this.contactService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerService instance
	 */
	protected void setPartnerService(PartnerService service) {
        this.partnerService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserService instance
	 */
	protected void setUserService(UserService service) {
        this.userService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CountryService instance
	 */
	protected void setCountryService(CountryService service) {
        this.countryService = service;
    }

}

