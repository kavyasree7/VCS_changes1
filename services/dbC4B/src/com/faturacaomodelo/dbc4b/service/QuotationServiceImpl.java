/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b.Quotation;
import com.faturacaomodelo.dbc4b.QuotationLine;


/**
 * ServiceImpl object for domain model class Quotation.
 *
 * @see Quotation
 */
@Service("dbC4B.QuotationService")
public class QuotationServiceImpl implements QuotationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(QuotationServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B.QuotationLineService")
	private QuotationLineService quotationLineService;

    @Autowired
    @Qualifier("dbC4B.QuotationDao")
    private WMGenericDao<Quotation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Quotation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4BTransactionManager")
    @Override
	public Quotation create(Quotation quotation) {
        LOGGER.debug("Creating a new Quotation with information: {}", quotation);
        Quotation quotationCreated = this.wmGenericDao.create(quotation);
        if(quotationCreated.getQuotationLines() != null) {
            for(QuotationLine quotationLine : quotationCreated.getQuotationLines()) {
                quotationLine.setQuotation(quotationCreated);
                LOGGER.debug("Creating a new child QuotationLine with information: {}", quotationLine);
                quotationLineService.create(quotationLine);
            }
        }
        return quotationCreated;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Quotation getById(Integer quotationId) throws EntityNotFoundException {
        LOGGER.debug("Finding Quotation by id: {}", quotationId);
        Quotation quotation = this.wmGenericDao.findById(quotationId);
        if (quotation == null){
            LOGGER.debug("No Quotation found with id: {}", quotationId);
            throw new EntityNotFoundException(String.valueOf(quotationId));
        }
        return quotation;
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Quotation findById(Integer quotationId) {
        LOGGER.debug("Finding Quotation by id: {}", quotationId);
        return this.wmGenericDao.findById(quotationId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4BTransactionManager")
	@Override
	public Quotation update(Quotation quotation) throws EntityNotFoundException {
        LOGGER.debug("Updating Quotation with information: {}", quotation);
        this.wmGenericDao.update(quotation);

        Integer quotationId = quotation.getId();

        return this.wmGenericDao.findById(quotationId);
    }

    @Transactional(value = "dbC4BTransactionManager")
	@Override
	public Quotation delete(Integer quotationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Quotation with id: {}", quotationId);
        Quotation deleted = this.wmGenericDao.findById(quotationId);
        if (deleted == null) {
            LOGGER.debug("No Quotation found with id: {}", quotationId);
            throw new EntityNotFoundException(String.valueOf(quotationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Page<Quotation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Quotations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Quotation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Quotations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B for table Quotation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<QuotationLine> findAssociatedQuotationLines(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated quotationLines");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("quotation.id = '" + id + "'");

        return quotationLineService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QuotationLineService instance
	 */
	protected void setQuotationLineService(QuotationLineService service) {
        this.quotationLineService = service;
    }

}

