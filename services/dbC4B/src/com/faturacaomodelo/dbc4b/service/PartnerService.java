/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b.AccountMove;
import com.faturacaomodelo.dbc4b.AccountMoveLine;
import com.faturacaomodelo.dbc4b.Business;
import com.faturacaomodelo.dbc4b.Invoice;
import com.faturacaomodelo.dbc4b.InvoicePartnerRel;
import com.faturacaomodelo.dbc4b.Partner;
import com.faturacaomodelo.dbc4b.PartnerBusinessRel;
import com.faturacaomodelo.dbc4b.PartnerContactRel;
import com.faturacaomodelo.dbc4b.PartnerPaymentMethodsRel;
import com.faturacaomodelo.dbc4b.Payment;
import com.faturacaomodelo.dbc4b.Product;
import com.faturacaomodelo.dbc4b.Quotation;

/**
 * Service object for domain model class {@link Partner}.
 */
public interface PartnerService {

    /**
     * Creates a new Partner. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Partner if any.
     *
     * @param partner Details of the Partner to be created; value cannot be null.
     * @return The newly created Partner.
     */
	Partner create(Partner partner);


	/**
	 * Returns Partner by given id if exists.
	 *
	 * @param partnerId The id of the Partner to get; value cannot be null.
	 * @return Partner associated with the given partnerId.
     * @throws EntityNotFoundException If no Partner is found.
	 */
	Partner getById(Integer partnerId) throws EntityNotFoundException;

    /**
	 * Find and return the Partner by given id if exists, returns null otherwise.
	 *
	 * @param partnerId The id of the Partner to get; value cannot be null.
	 * @return Partner associated with the given partnerId.
	 */
	Partner findById(Integer partnerId);


	/**
	 * Updates the details of an existing Partner. It replaces all fields of the existing Partner with the given partner.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Partner if any.
     *
	 * @param partner The details of the Partner to be updated; value cannot be null.
	 * @return The updated Partner.
	 * @throws EntityNotFoundException if no Partner is found with given input.
	 */
	Partner update(Partner partner) throws EntityNotFoundException;

    /**
	 * Deletes an existing Partner with the given id.
	 *
	 * @param partnerId The id of the Partner to be deleted; value cannot be null.
	 * @return The deleted Partner.
	 * @throws EntityNotFoundException if no Partner found with the given id.
	 */
	Partner delete(Integer partnerId) throws EntityNotFoundException;

	/**
	 * Find all Partners matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Partners.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Partner> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Partners matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Partners.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Partner> findAll(String query, Pageable pageable);

    /**
	 * Exports all Partners matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Partners in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Partner.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated accountMoves for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AccountMove instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AccountMove> findAssociatedAccountMoves(Integer id, Pageable pageable);

    /*
     * Returns the associated accountMoveLines for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AccountMoveLine instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AccountMoveLine> findAssociatedAccountMoveLines(Integer id, Pageable pageable);

    /*
     * Returns the associated businesses for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Business instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Business> findAssociatedBusinesses(Integer id, Pageable pageable);

    /*
     * Returns the associated invoices for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Invoice instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Invoice> findAssociatedInvoices(Integer id, Pageable pageable);

    /*
     * Returns the associated invoicePartnerRels for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated InvoicePartnerRel instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<InvoicePartnerRel> findAssociatedInvoicePartnerRels(Integer id, Pageable pageable);

    /*
     * Returns the associated partnerBusinessRels for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PartnerBusinessRel instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartnerBusinessRel> findAssociatedPartnerBusinessRels(Integer id, Pageable pageable);

    /*
     * Returns the associated partnerContactRels for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PartnerContactRel instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartnerContactRel> findAssociatedPartnerContactRels(Integer id, Pageable pageable);

    /*
     * Returns the associated partnerPaymentMethodsRels for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PartnerPaymentMethodsRel instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PartnerPaymentMethodsRel> findAssociatedPartnerPaymentMethodsRels(Integer id, Pageable pageable);

    /*
     * Returns the associated payments for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Payment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Payment> findAssociatedPayments(Integer id, Pageable pageable);

    /*
     * Returns the associated products for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Product instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Product> findAssociatedProducts(Integer id, Pageable pageable);

    /*
     * Returns the associated quotations for given Partner id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Quotation instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Quotation> findAssociatedQuotations(Integer id, Pageable pageable);

}

