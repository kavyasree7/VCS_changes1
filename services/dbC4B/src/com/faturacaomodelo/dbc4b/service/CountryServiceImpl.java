/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b.Country;
import com.faturacaomodelo.dbc4b.FiscalPosition;
import com.faturacaomodelo.dbc4b.PaymentMethods;
import com.faturacaomodelo.dbc4b.Tax;


/**
 * ServiceImpl object for domain model class Country.
 *
 * @see Country
 */
@Service("dbC4B.CountryService")
public class CountryServiceImpl implements CountryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountryServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B.TaxService")
	private TaxService taxService;

    @Autowired
	@Qualifier("dbC4B.FiscalPositionService")
	private FiscalPositionService fiscalPositionService;

    @Autowired
	@Qualifier("dbC4B.PaymentMethodsService")
	private PaymentMethodsService paymentMethodsService;

    @Autowired
    @Qualifier("dbC4B.CountryDao")
    private WMGenericDao<Country, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Country, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4BTransactionManager")
    @Override
	public Country create(Country country) {
        LOGGER.debug("Creating a new Country with information: {}", country);
        Country countryCreated = this.wmGenericDao.create(country);
        if(countryCreated.getFiscalPositions() != null) {
            for(FiscalPosition fiscalPosition : countryCreated.getFiscalPositions()) {
                fiscalPosition.setCountry(countryCreated);
                LOGGER.debug("Creating a new child FiscalPosition with information: {}", fiscalPosition);
                fiscalPositionService.create(fiscalPosition);
            }
        }

        if(countryCreated.getPaymentMethodses() != null) {
            for(PaymentMethods paymentMethodse : countryCreated.getPaymentMethodses()) {
                paymentMethodse.setCountry(countryCreated);
                LOGGER.debug("Creating a new child PaymentMethods with information: {}", paymentMethodse);
                paymentMethodsService.create(paymentMethodse);
            }
        }

        if(countryCreated.getTaxes() != null) {
            for(Tax taxe : countryCreated.getTaxes()) {
                taxe.setCountry(countryCreated);
                LOGGER.debug("Creating a new child Tax with information: {}", taxe);
                taxService.create(taxe);
            }
        }
        return countryCreated;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Country getById(Integer countryId) throws EntityNotFoundException {
        LOGGER.debug("Finding Country by id: {}", countryId);
        Country country = this.wmGenericDao.findById(countryId);
        if (country == null){
            LOGGER.debug("No Country found with id: {}", countryId);
            throw new EntityNotFoundException(String.valueOf(countryId));
        }
        return country;
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Country findById(Integer countryId) {
        LOGGER.debug("Finding Country by id: {}", countryId);
        return this.wmGenericDao.findById(countryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4BTransactionManager")
	@Override
	public Country update(Country country) throws EntityNotFoundException {
        LOGGER.debug("Updating Country with information: {}", country);
        this.wmGenericDao.update(country);

        Integer countryId = country.getId();

        return this.wmGenericDao.findById(countryId);
    }

    @Transactional(value = "dbC4BTransactionManager")
	@Override
	public Country delete(Integer countryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Country with id: {}", countryId);
        Country deleted = this.wmGenericDao.findById(countryId);
        if (deleted == null) {
            LOGGER.debug("No Country found with id: {}", countryId);
            throw new EntityNotFoundException(String.valueOf(countryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Page<Country> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Country> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B for table Country to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<FiscalPosition> findAssociatedFiscalPositions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated fiscalPositions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("country.id = '" + id + "'");

        return fiscalPositionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<PaymentMethods> findAssociatedPaymentMethodses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated paymentMethodses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("country.id = '" + id + "'");

        return paymentMethodsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Tax> findAssociatedTaxes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taxes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("country.id = '" + id + "'");

        return taxService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxService instance
	 */
	protected void setTaxService(TaxService service) {
        this.taxService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FiscalPositionService instance
	 */
	protected void setFiscalPositionService(FiscalPositionService service) {
        this.fiscalPositionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentMethodsService instance
	 */
	protected void setPaymentMethodsService(PaymentMethodsService service) {
        this.paymentMethodsService = service;
    }

}

