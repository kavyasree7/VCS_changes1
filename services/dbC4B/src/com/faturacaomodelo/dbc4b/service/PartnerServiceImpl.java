/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.dbc4b.AccountMove;
import com.faturacaomodelo.dbc4b.AccountMoveLine;
import com.faturacaomodelo.dbc4b.Business;
import com.faturacaomodelo.dbc4b.Invoice;
import com.faturacaomodelo.dbc4b.InvoicePartnerRel;
import com.faturacaomodelo.dbc4b.Partner;
import com.faturacaomodelo.dbc4b.PartnerBusinessRel;
import com.faturacaomodelo.dbc4b.PartnerContactRel;
import com.faturacaomodelo.dbc4b.PartnerPaymentMethodsRel;
import com.faturacaomodelo.dbc4b.Payment;
import com.faturacaomodelo.dbc4b.Product;
import com.faturacaomodelo.dbc4b.Quotation;


/**
 * ServiceImpl object for domain model class Partner.
 *
 * @see Partner
 */
@Service("dbC4B.PartnerService")
public class PartnerServiceImpl implements PartnerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartnerServiceImpl.class);

    @Autowired
	@Qualifier("dbC4B.BusinessService")
	private BusinessService businessService;

    @Autowired
	@Qualifier("dbC4B.InvoiceService")
	private InvoiceService invoiceService;

    @Autowired
	@Qualifier("dbC4B.PaymentService")
	private PaymentService paymentService;

    @Autowired
	@Qualifier("dbC4B.AccountMoveService")
	private AccountMoveService accountMoveService;

    @Autowired
	@Qualifier("dbC4B.QuotationService")
	private QuotationService quotationService;

    @Autowired
	@Qualifier("dbC4B.PartnerContactRelService")
	private PartnerContactRelService partnerContactRelService;

    @Autowired
	@Qualifier("dbC4B.PartnerBusinessRelService")
	private PartnerBusinessRelService partnerBusinessRelService;

    @Autowired
	@Qualifier("dbC4B.PartnerPaymentMethodsRelService")
	private PartnerPaymentMethodsRelService partnerPaymentMethodsRelService;

    @Autowired
	@Qualifier("dbC4B.AccountMoveLineService")
	private AccountMoveLineService accountMoveLineService;

    @Autowired
	@Qualifier("dbC4B.ProductService")
	private ProductService productService;

    @Autowired
	@Qualifier("dbC4B.InvoicePartnerRelService")
	private InvoicePartnerRelService invoicePartnerRelService;

    @Autowired
    @Qualifier("dbC4B.PartnerDao")
    private WMGenericDao<Partner, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Partner, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbC4BTransactionManager")
    @Override
	public Partner create(Partner partner) {
        LOGGER.debug("Creating a new Partner with information: {}", partner);
        Partner partnerCreated = this.wmGenericDao.create(partner);
        if(partnerCreated.getAccountMoves() != null) {
            for(AccountMove accountMove : partnerCreated.getAccountMoves()) {
                accountMove.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child AccountMove with information: {}", accountMove);
                accountMoveService.create(accountMove);
            }
        }

        if(partnerCreated.getAccountMoveLines() != null) {
            for(AccountMoveLine accountMoveLine : partnerCreated.getAccountMoveLines()) {
                accountMoveLine.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child AccountMoveLine with information: {}", accountMoveLine);
                accountMoveLineService.create(accountMoveLine);
            }
        }

        if(partnerCreated.getBusinesses() != null) {
            for(Business businesse : partnerCreated.getBusinesses()) {
                businesse.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child Business with information: {}", businesse);
                businessService.create(businesse);
            }
        }

        if(partnerCreated.getInvoices() != null) {
            for(Invoice invoice : partnerCreated.getInvoices()) {
                invoice.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child Invoice with information: {}", invoice);
                invoiceService.create(invoice);
            }
        }

        if(partnerCreated.getInvoicePartnerRels() != null) {
            for(InvoicePartnerRel invoicePartnerRel : partnerCreated.getInvoicePartnerRels()) {
                invoicePartnerRel.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child InvoicePartnerRel with information: {}", invoicePartnerRel);
                invoicePartnerRelService.create(invoicePartnerRel);
            }
        }

        if(partnerCreated.getPartnerBusinessRels() != null) {
            for(PartnerBusinessRel partnerBusinessRel : partnerCreated.getPartnerBusinessRels()) {
                partnerBusinessRel.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child PartnerBusinessRel with information: {}", partnerBusinessRel);
                partnerBusinessRelService.create(partnerBusinessRel);
            }
        }

        if(partnerCreated.getPartnerContactRels() != null) {
            for(PartnerContactRel partnerContactRel : partnerCreated.getPartnerContactRels()) {
                partnerContactRel.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child PartnerContactRel with information: {}", partnerContactRel);
                partnerContactRelService.create(partnerContactRel);
            }
        }

        if(partnerCreated.getPartnerPaymentMethodsRels() != null) {
            for(PartnerPaymentMethodsRel partnerPaymentMethodsRel : partnerCreated.getPartnerPaymentMethodsRels()) {
                partnerPaymentMethodsRel.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child PartnerPaymentMethodsRel with information: {}", partnerPaymentMethodsRel);
                partnerPaymentMethodsRelService.create(partnerPaymentMethodsRel);
            }
        }

        if(partnerCreated.getPayments() != null) {
            for(Payment payment : partnerCreated.getPayments()) {
                payment.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child Payment with information: {}", payment);
                paymentService.create(payment);
            }
        }

        if(partnerCreated.getProducts() != null) {
            for(Product product : partnerCreated.getProducts()) {
                product.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child Product with information: {}", product);
                productService.create(product);
            }
        }

        if(partnerCreated.getQuotations() != null) {
            for(Quotation quotation : partnerCreated.getQuotations()) {
                quotation.setPartner(partnerCreated);
                LOGGER.debug("Creating a new child Quotation with information: {}", quotation);
                quotationService.create(quotation);
            }
        }
        return partnerCreated;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Partner getById(Integer partnerId) throws EntityNotFoundException {
        LOGGER.debug("Finding Partner by id: {}", partnerId);
        Partner partner = this.wmGenericDao.findById(partnerId);
        if (partner == null){
            LOGGER.debug("No Partner found with id: {}", partnerId);
            throw new EntityNotFoundException(String.valueOf(partnerId));
        }
        return partner;
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Partner findById(Integer partnerId) {
        LOGGER.debug("Finding Partner by id: {}", partnerId);
        return this.wmGenericDao.findById(partnerId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbC4BTransactionManager")
	@Override
	public Partner update(Partner partner) throws EntityNotFoundException {
        LOGGER.debug("Updating Partner with information: {}", partner);
        this.wmGenericDao.update(partner);

        Integer partnerId = partner.getId();

        return this.wmGenericDao.findById(partnerId);
    }

    @Transactional(value = "dbC4BTransactionManager")
	@Override
	public Partner delete(Integer partnerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Partner with id: {}", partnerId);
        Partner deleted = this.wmGenericDao.findById(partnerId);
        if (deleted == null) {
            LOGGER.debug("No Partner found with id: {}", partnerId);
            throw new EntityNotFoundException(String.valueOf(partnerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public Page<Partner> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Partners");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Partner> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Partners");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbC4B for table Partner to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<AccountMove> findAssociatedAccountMoves(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accountMoves");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return accountMoveService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<AccountMoveLine> findAssociatedAccountMoveLines(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated accountMoveLines");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return accountMoveLineService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Business> findAssociatedBusinesses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated businesses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return businessService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Invoice> findAssociatedInvoices(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated invoices");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return invoiceService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<InvoicePartnerRel> findAssociatedInvoicePartnerRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated invoicePartnerRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return invoicePartnerRelService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<PartnerBusinessRel> findAssociatedPartnerBusinessRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partnerBusinessRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return partnerBusinessRelService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<PartnerContactRel> findAssociatedPartnerContactRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partnerContactRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return partnerContactRelService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<PartnerPaymentMethodsRel> findAssociatedPartnerPaymentMethodsRels(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated partnerPaymentMethodsRels");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return partnerPaymentMethodsRelService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Payment> findAssociatedPayments(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated payments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return paymentService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Product> findAssociatedProducts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated products");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return productService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "dbC4BTransactionManager")
    @Override
    public Page<Quotation> findAssociatedQuotations(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated quotations");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("partner.id = '" + id + "'");

        return quotationService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessService instance
	 */
	protected void setBusinessService(BusinessService service) {
        this.businessService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoiceService instance
	 */
	protected void setInvoiceService(InvoiceService service) {
        this.invoiceService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentService instance
	 */
	protected void setPaymentService(PaymentService service) {
        this.paymentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveService instance
	 */
	protected void setAccountMoveService(AccountMoveService service) {
        this.accountMoveService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QuotationService instance
	 */
	protected void setQuotationService(QuotationService service) {
        this.quotationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerContactRelService instance
	 */
	protected void setPartnerContactRelService(PartnerContactRelService service) {
        this.partnerContactRelService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerBusinessRelService instance
	 */
	protected void setPartnerBusinessRelService(PartnerBusinessRelService service) {
        this.partnerBusinessRelService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerPaymentMethodsRelService instance
	 */
	protected void setPartnerPaymentMethodsRelService(PartnerPaymentMethodsRelService service) {
        this.partnerPaymentMethodsRelService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveLineService instance
	 */
	protected void setAccountMoveLineService(AccountMoveLineService service) {
        this.accountMoveLineService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductService instance
	 */
	protected void setProductService(ProductService service) {
        this.productService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoicePartnerRelService instance
	 */
	protected void setInvoicePartnerRelService(InvoicePartnerRelService service) {
        this.invoicePartnerRelService = service;
    }

}

