/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.TaxScope;
import com.faturacaomodelo.dbc4b.service.TaxScopeService;


/**
 * Controller object for domain model class TaxScope.
 * @see TaxScope
 */
@RestController("dbC4B.TaxScopeController")
@Api(value = "TaxScopeController", description = "Exposes APIs to work with TaxScope resource.")
@RequestMapping("/dbC4B/TaxScope")
public class TaxScopeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxScopeController.class);

    @Autowired
	@Qualifier("dbC4B.TaxScopeService")
	private TaxScopeService taxScopeService;

	@ApiOperation(value = "Creates a new TaxScope instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TaxScope createTaxScope(@RequestBody TaxScope taxScope) {
		LOGGER.debug("Create TaxScope with information: {}" , taxScope);

		taxScope = taxScopeService.create(taxScope);
		LOGGER.debug("Created TaxScope with information: {}" , taxScope);

	    return taxScope;
	}


    @ApiOperation(value = "Returns the TaxScope instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxScope getTaxScope(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TaxScope with id: {}" , id);

        TaxScope foundTaxScope = taxScopeService.getById(id);
        LOGGER.debug("TaxScope details with id: {}" , foundTaxScope);

        return foundTaxScope;
    }

    @ApiOperation(value = "Updates the TaxScope instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxScope editTaxScope(@PathVariable("id") Integer id, @RequestBody TaxScope taxScope) throws EntityNotFoundException {
        LOGGER.debug("Editing TaxScope with id: {}" , taxScope.getId());

        taxScope.setId(id);
        taxScope = taxScopeService.update(taxScope);
        LOGGER.debug("TaxScope details with id: {}" , taxScope);

        return taxScope;
    }

    @ApiOperation(value = "Deletes the TaxScope instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTaxScope(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TaxScope with id: {}" , id);

        TaxScope deletedTaxScope = taxScopeService.delete(id);

        return deletedTaxScope != null;
    }

    /**
     * @deprecated Use {@link #findTaxScopes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TaxScope instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxScope> searchTaxScopesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaxScopes list");
        return taxScopeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxScope instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxScope> findTaxScopes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxScopes list");
        return taxScopeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxScope instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxScope> filterTaxScopes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxScopes list");
        return taxScopeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaxScopes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taxScopeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TaxScope instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaxScopes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TaxScopes");
		return taxScopeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaxScopeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taxScopeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxScopeService instance
	 */
	protected void setTaxScopeService(TaxScopeService service) {
		this.taxScopeService = service;
	}

}

