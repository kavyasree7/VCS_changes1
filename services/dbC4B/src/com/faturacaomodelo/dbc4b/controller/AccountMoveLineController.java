/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.AccountMoveLine;
import com.faturacaomodelo.dbc4b.service.AccountMoveLineService;


/**
 * Controller object for domain model class AccountMoveLine.
 * @see AccountMoveLine
 */
@RestController("dbC4B.AccountMoveLineController")
@Api(value = "AccountMoveLineController", description = "Exposes APIs to work with AccountMoveLine resource.")
@RequestMapping("/dbC4B/AccountMoveLine")
public class AccountMoveLineController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountMoveLineController.class);

    @Autowired
	@Qualifier("dbC4B.AccountMoveLineService")
	private AccountMoveLineService accountMoveLineService;

	@ApiOperation(value = "Creates a new AccountMoveLine instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public AccountMoveLine createAccountMoveLine(@RequestBody AccountMoveLine accountMoveLine) {
		LOGGER.debug("Create AccountMoveLine with information: {}" , accountMoveLine);

		accountMoveLine = accountMoveLineService.create(accountMoveLine);
		LOGGER.debug("Created AccountMoveLine with information: {}" , accountMoveLine);

	    return accountMoveLine;
	}


    @ApiOperation(value = "Returns the AccountMoveLine instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountMoveLine getAccountMoveLine(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AccountMoveLine with id: {}" , id);

        AccountMoveLine foundAccountMoveLine = accountMoveLineService.getById(id);
        LOGGER.debug("AccountMoveLine details with id: {}" , foundAccountMoveLine);

        return foundAccountMoveLine;
    }

    @ApiOperation(value = "Updates the AccountMoveLine instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountMoveLine editAccountMoveLine(@PathVariable("id") Integer id, @RequestBody AccountMoveLine accountMoveLine) throws EntityNotFoundException {
        LOGGER.debug("Editing AccountMoveLine with id: {}" , accountMoveLine.getId());

        accountMoveLine.setId(id);
        accountMoveLine = accountMoveLineService.update(accountMoveLine);
        LOGGER.debug("AccountMoveLine details with id: {}" , accountMoveLine);

        return accountMoveLine;
    }

    @ApiOperation(value = "Deletes the AccountMoveLine instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAccountMoveLine(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccountMoveLine with id: {}" , id);

        AccountMoveLine deletedAccountMoveLine = accountMoveLineService.delete(id);

        return deletedAccountMoveLine != null;
    }

    /**
     * @deprecated Use {@link #findAccountMoveLines(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AccountMoveLine instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMoveLine> searchAccountMoveLinesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccountMoveLines list");
        return accountMoveLineService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountMoveLine instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMoveLine> findAccountMoveLines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountMoveLines list");
        return accountMoveLineService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountMoveLine instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMoveLine> filterAccountMoveLines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountMoveLines list");
        return accountMoveLineService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAccountMoveLines(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return accountMoveLineService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AccountMoveLine instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAccountMoveLines( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AccountMoveLines");
		return accountMoveLineService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAccountMoveLineAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return accountMoveLineService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveLineService instance
	 */
	protected void setAccountMoveLineService(AccountMoveLineService service) {
		this.accountMoveLineService = service;
	}

}

