/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.PartnerBusinessRel;
import com.faturacaomodelo.dbc4b.service.PartnerBusinessRelService;


/**
 * Controller object for domain model class PartnerBusinessRel.
 * @see PartnerBusinessRel
 */
@RestController("dbC4B.PartnerBusinessRelController")
@Api(value = "PartnerBusinessRelController", description = "Exposes APIs to work with PartnerBusinessRel resource.")
@RequestMapping("/dbC4B/PartnerBusinessRel")
public class PartnerBusinessRelController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartnerBusinessRelController.class);

    @Autowired
	@Qualifier("dbC4B.PartnerBusinessRelService")
	private PartnerBusinessRelService partnerBusinessRelService;

	@ApiOperation(value = "Creates a new PartnerBusinessRel instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public PartnerBusinessRel createPartnerBusinessRel(@RequestBody PartnerBusinessRel partnerBusinessRel) {
		LOGGER.debug("Create PartnerBusinessRel with information: {}" , partnerBusinessRel);

		partnerBusinessRel = partnerBusinessRelService.create(partnerBusinessRel);
		LOGGER.debug("Created PartnerBusinessRel with information: {}" , partnerBusinessRel);

	    return partnerBusinessRel;
	}


    @ApiOperation(value = "Returns the PartnerBusinessRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartnerBusinessRel getPartnerBusinessRel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PartnerBusinessRel with id: {}" , id);

        PartnerBusinessRel foundPartnerBusinessRel = partnerBusinessRelService.getById(id);
        LOGGER.debug("PartnerBusinessRel details with id: {}" , foundPartnerBusinessRel);

        return foundPartnerBusinessRel;
    }

    @ApiOperation(value = "Updates the PartnerBusinessRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PartnerBusinessRel editPartnerBusinessRel(@PathVariable("id") Integer id, @RequestBody PartnerBusinessRel partnerBusinessRel) throws EntityNotFoundException {
        LOGGER.debug("Editing PartnerBusinessRel with id: {}" , partnerBusinessRel.getId());

        partnerBusinessRel.setId(id);
        partnerBusinessRel = partnerBusinessRelService.update(partnerBusinessRel);
        LOGGER.debug("PartnerBusinessRel details with id: {}" , partnerBusinessRel);

        return partnerBusinessRel;
    }

    @ApiOperation(value = "Deletes the PartnerBusinessRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePartnerBusinessRel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PartnerBusinessRel with id: {}" , id);

        PartnerBusinessRel deletedPartnerBusinessRel = partnerBusinessRelService.delete(id);

        return deletedPartnerBusinessRel != null;
    }

    /**
     * @deprecated Use {@link #findPartnerBusinessRels(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PartnerBusinessRel instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerBusinessRel> searchPartnerBusinessRelsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PartnerBusinessRels list");
        return partnerBusinessRelService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartnerBusinessRel instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerBusinessRel> findPartnerBusinessRels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartnerBusinessRels list");
        return partnerBusinessRelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PartnerBusinessRel instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PartnerBusinessRel> filterPartnerBusinessRels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PartnerBusinessRels list");
        return partnerBusinessRelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPartnerBusinessRels(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return partnerBusinessRelService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PartnerBusinessRel instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPartnerBusinessRels( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PartnerBusinessRels");
		return partnerBusinessRelService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPartnerBusinessRelAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return partnerBusinessRelService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartnerBusinessRelService instance
	 */
	protected void setPartnerBusinessRelService(PartnerBusinessRelService service) {
		this.partnerBusinessRelService = service;
	}

}

