/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.AccountMove;
import com.faturacaomodelo.dbc4b.AccountMoveLine;
import com.faturacaomodelo.dbc4b.service.AccountMoveService;


/**
 * Controller object for domain model class AccountMove.
 * @see AccountMove
 */
@RestController("dbC4B.AccountMoveController")
@Api(value = "AccountMoveController", description = "Exposes APIs to work with AccountMove resource.")
@RequestMapping("/dbC4B/AccountMove")
public class AccountMoveController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountMoveController.class);

    @Autowired
	@Qualifier("dbC4B.AccountMoveService")
	private AccountMoveService accountMoveService;

	@ApiOperation(value = "Creates a new AccountMove instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public AccountMove createAccountMove(@RequestBody AccountMove accountMove) {
		LOGGER.debug("Create AccountMove with information: {}" , accountMove);

		accountMove = accountMoveService.create(accountMove);
		LOGGER.debug("Created AccountMove with information: {}" , accountMove);

	    return accountMove;
	}


    @ApiOperation(value = "Returns the AccountMove instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountMove getAccountMove(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AccountMove with id: {}" , id);

        AccountMove foundAccountMove = accountMoveService.getById(id);
        LOGGER.debug("AccountMove details with id: {}" , foundAccountMove);

        return foundAccountMove;
    }

    @ApiOperation(value = "Updates the AccountMove instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccountMove editAccountMove(@PathVariable("id") Integer id, @RequestBody AccountMove accountMove) throws EntityNotFoundException {
        LOGGER.debug("Editing AccountMove with id: {}" , accountMove.getId());

        accountMove.setId(id);
        accountMove = accountMoveService.update(accountMove);
        LOGGER.debug("AccountMove details with id: {}" , accountMove);

        return accountMove;
    }

    @ApiOperation(value = "Deletes the AccountMove instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAccountMove(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccountMove with id: {}" , id);

        AccountMove deletedAccountMove = accountMoveService.delete(id);

        return deletedAccountMove != null;
    }

    /**
     * @deprecated Use {@link #findAccountMoves(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AccountMove instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMove> searchAccountMovesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccountMoves list");
        return accountMoveService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountMove instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMove> findAccountMoves(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountMoves list");
        return accountMoveService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccountMove instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMove> filterAccountMoves(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccountMoves list");
        return accountMoveService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAccountMoves(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return accountMoveService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AccountMove instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAccountMoves( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AccountMoves");
		return accountMoveService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAccountMoveAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return accountMoveService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/accountMoveLines", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the accountMoveLines instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMoveLine> findAssociatedAccountMoveLines(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated accountMoveLines");
        return accountMoveService.findAssociatedAccountMoveLines(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccountMoveService instance
	 */
	protected void setAccountMoveService(AccountMoveService service) {
		this.accountMoveService = service;
	}

}

