/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.AccountMove;
import com.faturacaomodelo.dbc4b.Journal;
import com.faturacaomodelo.dbc4b.Payment;
import com.faturacaomodelo.dbc4b.service.PaymentService;


/**
 * Controller object for domain model class Payment.
 * @see Payment
 */
@RestController("dbC4B.PaymentController")
@Api(value = "PaymentController", description = "Exposes APIs to work with Payment resource.")
@RequestMapping("/dbC4B/Payment")
public class PaymentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentController.class);

    @Autowired
	@Qualifier("dbC4B.PaymentService")
	private PaymentService paymentService;

	@ApiOperation(value = "Creates a new Payment instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Payment createPayment(@RequestBody Payment payment) {
		LOGGER.debug("Create Payment with information: {}" , payment);

		payment = paymentService.create(payment);
		LOGGER.debug("Created Payment with information: {}" , payment);

	    return payment;
	}


    @ApiOperation(value = "Returns the Payment instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Payment getPayment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Payment with id: {}" , id);

        Payment foundPayment = paymentService.getById(id);
        LOGGER.debug("Payment details with id: {}" , foundPayment);

        return foundPayment;
    }

    @ApiOperation(value = "Updates the Payment instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Payment editPayment(@PathVariable("id") Integer id, @RequestBody Payment payment) throws EntityNotFoundException {
        LOGGER.debug("Editing Payment with id: {}" , payment.getId());

        payment.setId(id);
        payment = paymentService.update(payment);
        LOGGER.debug("Payment details with id: {}" , payment);

        return payment;
    }

    @ApiOperation(value = "Deletes the Payment instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePayment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Payment with id: {}" , id);

        Payment deletedPayment = paymentService.delete(id);

        return deletedPayment != null;
    }

    /**
     * @deprecated Use {@link #findPayments(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Payment instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Payment> searchPaymentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Payments list");
        return paymentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Payment instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Payment> findPayments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Payments list");
        return paymentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Payment instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Payment> filterPayments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Payments list");
        return paymentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPayments(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return paymentService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Payment instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPayments( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Payments");
		return paymentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPaymentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return paymentService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/accountMoves", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the accountMoves instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccountMove> findAssociatedAccountMoves(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated accountMoves");
        return paymentService.findAssociatedAccountMoves(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/journals", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the journals instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Journal> findAssociatedJournals(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated journals");
        return paymentService.findAssociatedJournals(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentService instance
	 */
	protected void setPaymentService(PaymentService service) {
		this.paymentService = service;
	}

}

