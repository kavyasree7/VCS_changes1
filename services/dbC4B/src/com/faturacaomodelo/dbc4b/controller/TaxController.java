/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.Product;
import com.faturacaomodelo.dbc4b.Tax;
import com.faturacaomodelo.dbc4b.TaxInvoiceLineRel;
import com.faturacaomodelo.dbc4b.TaxRate;
import com.faturacaomodelo.dbc4b.service.TaxService;


/**
 * Controller object for domain model class Tax.
 * @see Tax
 */
@RestController("dbC4B.TaxController")
@Api(value = "TaxController", description = "Exposes APIs to work with Tax resource.")
@RequestMapping("/dbC4B/Tax")
public class TaxController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxController.class);

    @Autowired
	@Qualifier("dbC4B.TaxService")
	private TaxService taxService;

	@ApiOperation(value = "Creates a new Tax instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Tax createTax(@RequestBody Tax tax) {
		LOGGER.debug("Create Tax with information: {}" , tax);

		tax = taxService.create(tax);
		LOGGER.debug("Created Tax with information: {}" , tax);

	    return tax;
	}


    @ApiOperation(value = "Returns the Tax instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tax getTax(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Tax with id: {}" , id);

        Tax foundTax = taxService.getById(id);
        LOGGER.debug("Tax details with id: {}" , foundTax);

        return foundTax;
    }

    @ApiOperation(value = "Updates the Tax instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tax editTax(@PathVariable("id") Integer id, @RequestBody Tax tax) throws EntityNotFoundException {
        LOGGER.debug("Editing Tax with id: {}" , tax.getId());

        tax.setId(id);
        tax = taxService.update(tax);
        LOGGER.debug("Tax details with id: {}" , tax);

        return tax;
    }

    @ApiOperation(value = "Deletes the Tax instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTax(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Tax with id: {}" , id);

        Tax deletedTax = taxService.delete(id);

        return deletedTax != null;
    }

    /**
     * @deprecated Use {@link #findTaxes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Tax instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tax> searchTaxesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Taxes list");
        return taxService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tax instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tax> findTaxes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Taxes list");
        return taxService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tax instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tax> filterTaxes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Taxes list");
        return taxService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaxes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taxService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Tax instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaxes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Taxes");
		return taxService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaxAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taxService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/products", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the products instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Product> findAssociatedProducts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated products");
        return taxService.findAssociatedProducts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/taxRates", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the taxRates instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxRate> findAssociatedTaxRates(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated taxRates");
        return taxService.findAssociatedTaxRates(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/taxInvoiceLineRels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the taxInvoiceLineRels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxInvoiceLineRel> findAssociatedTaxInvoiceLineRels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated taxInvoiceLineRels");
        return taxService.findAssociatedTaxInvoiceLineRels(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxService instance
	 */
	protected void setTaxService(TaxService service) {
		this.taxService = service;
	}

}

