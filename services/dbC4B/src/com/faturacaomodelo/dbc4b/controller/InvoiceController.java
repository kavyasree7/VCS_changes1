/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.Invoice;
import com.faturacaomodelo.dbc4b.InvoiceLine;
import com.faturacaomodelo.dbc4b.InvoicePartnerRel;
import com.faturacaomodelo.dbc4b.Quotation;
import com.faturacaomodelo.dbc4b.service.InvoiceService;


/**
 * Controller object for domain model class Invoice.
 * @see Invoice
 */
@RestController("dbC4B.InvoiceController")
@Api(value = "InvoiceController", description = "Exposes APIs to work with Invoice resource.")
@RequestMapping("/dbC4B/Invoice")
public class InvoiceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InvoiceController.class);

    @Autowired
	@Qualifier("dbC4B.InvoiceService")
	private InvoiceService invoiceService;

	@ApiOperation(value = "Creates a new Invoice instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Invoice createInvoice(@RequestBody Invoice invoice) {
		LOGGER.debug("Create Invoice with information: {}" , invoice);

		invoice = invoiceService.create(invoice);
		LOGGER.debug("Created Invoice with information: {}" , invoice);

	    return invoice;
	}


    @ApiOperation(value = "Returns the Invoice instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Invoice getInvoice(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Invoice with id: {}" , id);

        Invoice foundInvoice = invoiceService.getById(id);
        LOGGER.debug("Invoice details with id: {}" , foundInvoice);

        return foundInvoice;
    }

    @ApiOperation(value = "Updates the Invoice instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Invoice editInvoice(@PathVariable("id") Integer id, @RequestBody Invoice invoice) throws EntityNotFoundException {
        LOGGER.debug("Editing Invoice with id: {}" , invoice.getId());

        invoice.setId(id);
        invoice = invoiceService.update(invoice);
        LOGGER.debug("Invoice details with id: {}" , invoice);

        return invoice;
    }

    @ApiOperation(value = "Deletes the Invoice instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInvoice(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Invoice with id: {}" , id);

        Invoice deletedInvoice = invoiceService.delete(id);

        return deletedInvoice != null;
    }

    /**
     * @deprecated Use {@link #findInvoices(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Invoice instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Invoice> searchInvoicesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Invoices list");
        return invoiceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Invoice instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Invoice> findInvoices(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Invoices list");
        return invoiceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Invoice instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Invoice> filterInvoices(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Invoices list");
        return invoiceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInvoices(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return invoiceService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Invoice instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInvoices( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Invoices");
		return invoiceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getInvoiceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return invoiceService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/invoiceLines", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the invoiceLines instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InvoiceLine> findAssociatedInvoiceLines(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated invoiceLines");
        return invoiceService.findAssociatedInvoiceLines(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/invoicePartnerRels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the invoicePartnerRels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InvoicePartnerRel> findAssociatedInvoicePartnerRels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated invoicePartnerRels");
        return invoiceService.findAssociatedInvoicePartnerRels(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/quotations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the quotations instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Quotation> findAssociatedQuotations(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated quotations");
        return invoiceService.findAssociatedQuotations(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InvoiceService instance
	 */
	protected void setInvoiceService(InvoiceService service) {
		this.invoiceService = service;
	}

}

