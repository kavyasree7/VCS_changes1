/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.dbc4b.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.faturacaomodelo.dbc4b.TaxInvoiceLineRel;
import com.faturacaomodelo.dbc4b.service.TaxInvoiceLineRelService;


/**
 * Controller object for domain model class TaxInvoiceLineRel.
 * @see TaxInvoiceLineRel
 */
@RestController("dbC4B.TaxInvoiceLineRelController")
@Api(value = "TaxInvoiceLineRelController", description = "Exposes APIs to work with TaxInvoiceLineRel resource.")
@RequestMapping("/dbC4B/TaxInvoiceLineRel")
public class TaxInvoiceLineRelController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxInvoiceLineRelController.class);

    @Autowired
	@Qualifier("dbC4B.TaxInvoiceLineRelService")
	private TaxInvoiceLineRelService taxInvoiceLineRelService;

	@ApiOperation(value = "Creates a new TaxInvoiceLineRel instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TaxInvoiceLineRel createTaxInvoiceLineRel(@RequestBody TaxInvoiceLineRel taxInvoiceLineRel) {
		LOGGER.debug("Create TaxInvoiceLineRel with information: {}" , taxInvoiceLineRel);

		taxInvoiceLineRel = taxInvoiceLineRelService.create(taxInvoiceLineRel);
		LOGGER.debug("Created TaxInvoiceLineRel with information: {}" , taxInvoiceLineRel);

	    return taxInvoiceLineRel;
	}


    @ApiOperation(value = "Returns the TaxInvoiceLineRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxInvoiceLineRel getTaxInvoiceLineRel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TaxInvoiceLineRel with id: {}" , id);

        TaxInvoiceLineRel foundTaxInvoiceLineRel = taxInvoiceLineRelService.getById(id);
        LOGGER.debug("TaxInvoiceLineRel details with id: {}" , foundTaxInvoiceLineRel);

        return foundTaxInvoiceLineRel;
    }

    @ApiOperation(value = "Updates the TaxInvoiceLineRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaxInvoiceLineRel editTaxInvoiceLineRel(@PathVariable("id") Integer id, @RequestBody TaxInvoiceLineRel taxInvoiceLineRel) throws EntityNotFoundException {
        LOGGER.debug("Editing TaxInvoiceLineRel with id: {}" , taxInvoiceLineRel.getId());

        taxInvoiceLineRel.setId(id);
        taxInvoiceLineRel = taxInvoiceLineRelService.update(taxInvoiceLineRel);
        LOGGER.debug("TaxInvoiceLineRel details with id: {}" , taxInvoiceLineRel);

        return taxInvoiceLineRel;
    }

    @ApiOperation(value = "Deletes the TaxInvoiceLineRel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTaxInvoiceLineRel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TaxInvoiceLineRel with id: {}" , id);

        TaxInvoiceLineRel deletedTaxInvoiceLineRel = taxInvoiceLineRelService.delete(id);

        return deletedTaxInvoiceLineRel != null;
    }

    /**
     * @deprecated Use {@link #findTaxInvoiceLineRels(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TaxInvoiceLineRel instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxInvoiceLineRel> searchTaxInvoiceLineRelsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaxInvoiceLineRels list");
        return taxInvoiceLineRelService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxInvoiceLineRel instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxInvoiceLineRel> findTaxInvoiceLineRels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxInvoiceLineRels list");
        return taxInvoiceLineRelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaxInvoiceLineRel instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaxInvoiceLineRel> filterTaxInvoiceLineRels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxInvoiceLineRels list");
        return taxInvoiceLineRelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaxInvoiceLineRels(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taxInvoiceLineRelService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TaxInvoiceLineRel instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaxInvoiceLineRels( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TaxInvoiceLineRels");
		return taxInvoiceLineRelService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaxInvoiceLineRelAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taxInvoiceLineRelService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxInvoiceLineRelService instance
	 */
	protected void setTaxInvoiceLineRelService(TaxInvoiceLineRelService service) {
		this.taxInvoiceLineRelService = service;
	}

}

