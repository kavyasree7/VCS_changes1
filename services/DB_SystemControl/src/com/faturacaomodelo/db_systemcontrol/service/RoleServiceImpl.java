/*Generated by WaveMaker Studio*/
package com.faturacaomodelo.db_systemcontrol.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.faturacaomodelo.db_systemcontrol.Role;


/**
 * ServiceImpl object for domain model class Role.
 *
 * @see Role
 */
@Service("DB_SystemControl.RoleService")
@Validated
public class RoleServiceImpl implements RoleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RoleServiceImpl.class);


    @Autowired
    @Qualifier("DB_SystemControl.RoleDao")
    private WMGenericDao<Role, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Role, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB_SystemControlTransactionManager")
    @Override
	public Role create(Role roleInstance) {
        LOGGER.debug("Creating a new Role with information: {}", roleInstance);
        Role roleInstanceCreated = this.wmGenericDao.create(roleInstance);
        return roleInstanceCreated;
    }

	@Transactional(readOnly = true, value = "DB_SystemControlTransactionManager")
	@Override
	public Role getById(Integer roleId) throws EntityNotFoundException {
        LOGGER.debug("Finding Role by id: {}", roleId);
        Role roleInstance = this.wmGenericDao.findById(roleId);
        if (roleInstance == null){
            LOGGER.debug("No Role found with id: {}", roleId);
            throw new EntityNotFoundException(String.valueOf(roleId));
        }
        return roleInstance;
    }

    @Transactional(readOnly = true, value = "DB_SystemControlTransactionManager")
	@Override
	public Role findById(Integer roleId) {
        LOGGER.debug("Finding Role by id: {}", roleId);
        return this.wmGenericDao.findById(roleId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DB_SystemControlTransactionManager")
	@Override
	public Role update(Role roleInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating Role with information: {}", roleInstance);
        this.wmGenericDao.update(roleInstance);

        Integer roleId = roleInstance.getId();

        return this.wmGenericDao.findById(roleId);
    }

    @Transactional(value = "DB_SystemControlTransactionManager")
	@Override
	public Role delete(Integer roleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Role with id: {}", roleId);
        Role deleted = this.wmGenericDao.findById(roleId);
        if (deleted == null) {
            LOGGER.debug("No Role found with id: {}", roleId);
            throw new EntityNotFoundException(String.valueOf(roleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DB_SystemControlTransactionManager")
	@Override
	public Page<Role> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB_SystemControlTransactionManager")
    @Override
    public Page<Role> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB_SystemControlTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB_SystemControl for table Role to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DB_SystemControlTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB_SystemControlTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

